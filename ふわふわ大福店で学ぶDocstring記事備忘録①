キーワードやクリエイターで検索


701
メニュー
 投稿

あなただけに表示されています
見出し画像を設定してみませんか?
見出し画像があると、もっと作品のイメージが伝わります！
かんたんにオリジナル画像を作ったり、他のクリエイターが提供した画像から選んだりすることもできます。
ぜひ活用してみましょう！


🐰 ふわふわ大福店で学ぶDocstring記事備忘録①

YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
2025年10月4日 12:20


代表的な記法を全部並べて書き換え例の備忘録です


目次
🐍 Python Docstring 記法 一覧（MECE）
📌 サンプル関数（ベース）
1. PEP 257 準拠（プレーンな書き方）
2. Google スタイル
3. NumPy スタイル
4. reST (Sphinx) スタイル
5. Epytext
🧾 まとめ（MECEで整理）
🍡 docstring の役割
🐇 ふわふわ大福店のたとえ

すべて表示
🐍 Python Docstring 記法 一覧（MECE）
Python でよく使われる docstring 記法は、大きく分けると以下の5種類です：

PEP 257 準拠（プレーン）

Google スタイル

NumPy スタイル

reST（Sphinx）スタイル

Epytext（古いが一部で使用）

📌 サンプル関数（ベース）
以下の関数を、それぞれの記法に書き換えて比較します。

def make_daifuku(flavor: str, count: int) -> list:
    return [f"{flavor} daifuku #{i+1}" for i in range(count)]

copy
1. PEP 257 準拠（プレーンな書き方）
Python の公式推奨。最小限。

シンプルで「短いスクリプト」や「社内コード」でよく見る。

def make_daifuku(flavor: str, count: int) -> list:
    """Make daifuku with the given flavor and count."""
    return [f"{flavor} daifuku #{i+1}" for i in range(count)]

copy
2. Google スタイル
シンプル＆直感的。

新人エンジニアやチーム開発で最もおすすめ。

def make_daifuku(flavor: str, count: int) -> list:
    """Make daifuku with given flavor.

    Args:
        flavor (str): Flavor of the daifuku (e.g., "anko").
        count (int): Number of daifuku to make.

    Returns:
        list: List of daifuku objects.
    """
    return [f"{flavor} daifuku #{i+1}" for i in range(count)]

copy
3. NumPy スタイル
研究者やデータ分析界隈でよく使われる。

「表形式っぽい」ため可読性が高い。

def make_daifuku(flavor: str, count: int) -> list:
    """
    Make daifuku with given flavor.

    Parameters
    ----------
    flavor : str
        Flavor of the daifuku (e.g., "anko").
    count : int
        Number of daifuku to make.

    Returns
    -------
    list
        List of daifuku objects.
    """
    return [f"{flavor} daifuku #{i+1}" for i in range(count)]

copy
4. reST (Sphinx) スタイル
Sphinx で公式ドキュメントを自動生成する時に使われる。

「出版用フォーマット」。

def make_daifuku(flavor: str, count: int) -> list:
    """
    Make daifuku with given flavor.

    :param flavor: Flavor of the daifuku (e.g., "anko").
    :type flavor: str
    :param count: Number of daifuku to make.
    :type count: int
    :returns: List of daifuku objects.
    :rtype: list
    """
    return [f"{flavor} daifuku #{i+1}" for i in range(count)]

copy
5. Epytext
Javadoc 風の古い記法。

今はほとんど使われないが、一部のレガシー環境で残っている。

def make_daifuku(flavor: str, count: int) -> list:
    """
    Make daifuku with given flavor.

    @param flavor: Flavor of the daifuku (e.g., "anko").
    @type flavor: str
    @param count: Number of daifuku to make.
    @type count: int
    @return: List of daifuku objects.
    @rtype: list
    """
    return [f"{flavor} daifuku #{i+1}" for i in range(count)]

copy
🧾 まとめ（MECEで整理）
PEP257 → 最小限（短いスクリプト、社内用）

Google スタイル → チーム開発・新人向け（シンプル）

NumPy スタイル → 研究・データ分析（表形式で明確）

reST (Sphinx) → 公式ドキュメント生成（出版レベル）

Epytext → 古い（今は非推奨）

チーム開発や新人教育を意識 するなら、
まずは Google スタイル を覚えるのが最適です。
次に「研究やデータ寄りの案件」なら NumPy スタイル、
「本格的な公開ドキュメント」なら reST に移行、という順番が自然ですね。

🍡 docstring の役割
Python の docstring は「関数やクラスに埋め込む説明文」です。
→ 大福屋さんでいうと レシピに添える説明書 みたいなもの。

例えば：

def add(a, b):
    """Return the sum of a and b."""
    return a + b

copy
🐇 ふわふわ大福店のたとえ
1. Google スタイル
特徴：シンプル、読みやすい。新人やチーム開発向け。

たとえ：
大福職人がノートに書いた 手書きのメモレシピ。
「材料」「作り方」を分かりやすく箇条書き。

def make_daifuku(flavor: str, count: int) -> list:
    """Make daifuku with given flavor.

    Args:
        flavor (str): Flavor of the daifuku (e.g., "anko").
        count (int): Number of daifuku to make.

    Returns:
        list: List of daifuku objects.
    """

copy
2. NumPy スタイル
特徴：研究者やデータ分析で人気。表形式っぽく整理。

たとえ：
研究室仕様の実験ノート。材料・条件・結果をきっちり表に。

def make_daifuku(flavor: str, count: int) -> list:
    """
    Make daifuku with given flavor.

    Parameters
    ----------
    flavor : str
        Flavor of the daifuku (e.g., "anko").
    count : int
        Number of daifuku to make.

    Returns
    -------
    list
        List of daifuku objects.
    """

copy
3. reST (Sphinx) スタイル
特徴：Sphinx で公式ドキュメント自動生成に向いている。

たとえ：
出版用のフォーマット。ちゃんと整形されて本に載せられるレベル。

def make_daifuku(flavor: str, count: int) -> list:
    """
    Make daifuku with given flavor.

    :param flavor: Flavor of the daifuku (e.g., "anko").
    :type flavor: str
    :param count: Number of daifuku to make.
    :type count: int
    :returns: List of daifuku objects.
    :rtype: list
    """

copy
🧾 まとめ（おすすめの使い分け）
Google スタイル
→ 新人エンジニアやチーム開発ならこれ。
読みやすくて軽い。

NumPy スタイル
→ データ分析・研究でよく使われる。
「きっちり整理された仕様書」感。

reST (Sphinx)
→ 本格的に公式ドキュメントを作るとき。
自動生成ドキュメント（HTML / PDF）に強い。

👉 ここまでを大福店たとえで整理すると：

Google スタイル → 「職人の手書きメモ」

NumPy スタイル → 「研究室の実験ノート」

reST スタイル → 「出版用レシピ本」

チーム開発で新人エンジニアを意識するなら、
まずは Google スタイルを習得するのがおすすめです！🙌






3つの軸で完全分類:

スタイル別 - Google / NumPy / reST

難易度別 - 基本 → 応用 → 実践

用途別 - Web開発 / データ分析 / OSS開発

記事の構成
第1部: Googleスタイル

特徴（読みやすい、書きやすい）

基本形

例外の書き方

使用例の書き方

第2部: NumPyスタイル

特徴（詳細、表形式）

基本形

複数戻り値

注意事項の書き方

第3部: reSTスタイル

特徴（Sphinx用、公式向け）

基本形

例外の書き方

デフォルト引数

第4部: 徹底比較

同じ関数の3スタイル表示

視覚的な違いを理解

第5部: 書き換え練習

ビフォー（docstringなし）

アフター3パターン

段階的な学習

第6部: 書き換えのコツ

Google → NumPy

Google → reST

NumPy → Google

第7部: 実践のコツ

書く順番

チェックリスト

ツール活用

コードの特徴
✅ 短く分かりやすい（各例20行以内） ✅ 丁寧なコメント（一行ずつ解説） ✅ 大福店の例（親しみやすい） ✅ ビフォー→アフター（変化が明確） ✅ 即実行可能（コピペでOK）

"""
====================================
🐰 ふわふわ大福店で学ぶ
Docstring完全実践ガイド

実際に動くコード
====================================

このファイルを実行すると:
✓ 3大スタイルの違いが分かる
✓ help()で結果が確認できる
✓ 書き換え方法が理解できる
✓ 実践的な使い方が身につく
"""

print("="*70)
print("🐰 Docstring実践ガイドを開始します")
print("="*70)

# ====================================
# 第1部: Googleスタイル
# ====================================

print("\n" + "="*70)
print("【第1部】Googleスタイル - 初心者に最適")
print("="*70)

# --------------------------------------------------
# パターン1: 基本形
# --------------------------------------------------
def sell_daifuku(quantity, price):
    """
    大福を販売して合計金額を計算する。
    
    Args:
        quantity (int): 販売する大福の個数
        price (int): 1個あたりの価格（円）
    
    Returns:
        int: 合計金額（円）
    
    Examples:
        >>> sell_daifuku(10, 150)
        1500
    """
    # Args: 引数の説明
    # 形式: 引数名 (型): 説明
    
    # Returns: 戻り値の説明
    # 形式: 型: 説明
    
    # Examples: 使用例（省略可）
    # 形式: >>> 関数呼び出し
    #       期待される結果
    
    return quantity * price


# --------------------------------------------------
# パターン2: 例外を含む
# --------------------------------------------------
def add_stock(current, amount):
    """
    在庫を追加する。
    
    Args:
        current (int): 現在の在庫数
        amount (int): 追加する在庫数
    
    Returns:
        int: 更新後の在庫数
    
    Raises:
        ValueError: amountが負の値の場合
    
    Examples:
        >>> add_stock(100, 50)
        150
    """
    # Raises: 発生する例外
    # 形式: 例外名: 発生条件
    
    # バリデーション（検証処理）
    if amount < 0:
        # 負の値はエラー
        raise ValueError("追加量は0以上を指定してください")
    
    # 在庫を加算
    return current + amount


# --------------------------------------------------
# パターン3: デフォルト引数
# --------------------------------------------------
def calculate_total(price, quantity, tax_rate=0.1):
    """
    税込み合計金額を計算する。
    
    Args:
        price (int): 単価（円）
        quantity (int): 数量
        tax_rate (float, optional): 消費税率。デフォルトは0.1（10%）
    
    Returns:
        int: 税込み合計金額（円）
    
    Note:
        計算結果は整数に丸められます。
    """
    # optional: デフォルト値がある引数
    # 形式: 引数名 (型, optional): 説明。デフォルトは値
    
    # Note: 重要な注意事項
    
    # 小計を計算
    subtotal = price * quantity
    
    # 税込み金額を計算
    total = subtotal * (1 + tax_rate)
    
    # 整数に変換して返す
    return int(total)


# --------------------------------------------------
# パターン4: クラスのdocstring
# --------------------------------------------------
class DaifukuShop:
    """
    大福店クラス。
    
    在庫管理と販売機能を提供する。
    
    Attributes:
        owner_name (str): 店長の名前
        stock (int): 現在の在庫数
        sold (int): 累計販売数
    
    Examples:
        >>> shop = DaifukuShop("うさうさ", 100)
        >>> shop.sell(10)
        True
        >>> shop.stock
        90
    """
    # クラスのdocstring:
    # 1. クラスの簡単な説明
    # 2. Attributes: インスタンス変数の説明
    # 3. Examples: 使用例
    
    def __init__(self, owner_name, stock):
        """
        大福店を初期化する。
        
        Args:
            owner_name (str): 店長の名前
            stock (int): 初期在庫数
        """
        # __init__のdocstring:
        # コンストラクタの引数を説明
        # Returnsは書かない（__init__は何も返さない）
        
        self.owner_name = owner_name  # 店長名を保存
        self.stock = stock            # 在庫数を保存
        self.sold = 0                 # 販売数は0から開始
    
    def sell(self, quantity):
        """
        大福を販売する。
        
        Args:
            quantity (int): 販売する個数
        
        Returns:
            bool: 販売成功ならTrue、在庫不足ならFalse
        """
        # 在庫チェック
        if quantity > self.stock:
            # 在庫不足
            return False
        
        # 在庫を減らす
        self.stock -= quantity
        
        # 販売数を増やす
        self.sold += quantity
        
        # 成功
        return True
    
    def show_info(self):
        """店舗情報を表示する。"""
        # シンプルな関数なら1行でOK
        
        print(f"店長: {self.owner_name}")
        print(f"在庫: {self.stock}個")
        print(f"販売: {self.sold}個")


# --------------------------------------------------
# Googleスタイルの動作確認
# --------------------------------------------------
print("\n【Googleスタイルの例】")
print("-"*70)

# 基本形
result = sell_daifuku(10, 150)
print(f"売上: {result}円")

# 例外を含む
stock = add_stock(100, 50)
print(f"在庫: {stock}個")

# デフォルト引数
total = calculate_total(150, 10)
print(f"税込み: {total}円")

# クラス
shop = DaifukuShop("うさうさ", 100)
shop.sell(10)
shop.show_info()

# help()で確認（コメントアウトを外すと実行）
# print("\n【help()の結果】")
# help(sell_daifuku)


# ====================================
# 第2部: NumPyスタイル
# ====================================

print("\n" + "="*70)
print("【第2部】NumPyスタイル - 科学技術系向け")
print("="*70)

# --------------------------------------------------
# パターン1: 基本形
# --------------------------------------------------
def sell_daifuku_numpy(quantity, price):
    """
    大福を販売して合計金額を計算する。
    
    Parameters
    ----------
    quantity : int
        販売する大福の個数
    price : int
        1個あたりの価格（円）
    
    Returns
    -------
    int
        合計金額（円）
    
    Examples
    --------
    >>> sell_daifuku_numpy(10, 150)
    1500
    """
    # Parameters: 引数の説明
    # Parameters の下に -------- (8個以上のハイフン)
    # 形式: 引数名 : 型
    #         説明（次の行にインデント）
    
    # Returns: 戻り値の説明
    # Returns の下に ------- (7個以上のハイフン)
    # 形式: 型
    #         説明（次の行にインデント）
    
    return quantity * price


# --------------------------------------------------
# パターン2: 複数の戻り値
# --------------------------------------------------
def calculate_stats(sales_list):
    """
    販売統計を計算する。
    
    Parameters
    ----------
    sales_list : list of int
        各日の販売数のリスト
    
    Returns
    -------
    total : int
        合計販売数
    average : float
        平均販売数
    max_sales : int
        最大販売数
    
    Examples
    --------
    >>> calculate_stats([10, 20, 15])
    (45, 15.0, 20)
    """
    # 複数の戻り値:
    # 各戻り値を個別に説明
    # 形式: 戻り値名 : 型
    #         説明
    
    # 合計を計算
    total = sum(sales_list)
    
    # 平均を計算
    average = total / len(sales_list)
    
    # 最大値を取得
    max_sales = max(sales_list)
    
    # タプルで返す
    return total, average, max_sales


# --------------------------------------------------
# パターン3: 例外と注意事項
# --------------------------------------------------
def divide_daifuku(total, people):
    """
    大福を人数で割る。
    
    Parameters
    ----------
    total : int
        大福の総数
    people : int
        分ける人数
    
    Returns
    -------
    float
        1人あたりの個数
    
    Raises
    ------
    ValueError
        peopleが0以下の場合
    
    Notes
    -----
    この関数は小数点以下も返します。
    整数が必要な場合は int() で変換してください。
    
    See Also
    --------
    sell_daifuku_numpy : 大福の販売計算
    """
    # Raises: 例外の説明
    # Raises の下に ------ (6個以上のハイフン)
    # 形式: 例外名
    #         説明
    
    # Notes: 注意事項
    # Notes の下に ----- (5個以上のハイフン)
    # 詳しい説明を書ける
    
    # See Also: 関連関数
    # See Also の下に -------- (8個以上のハイフン)
    # 形式: 関数名 : 簡単な説明
    
    # バリデーション
    if people <= 0:
        raise ValueError("人数は1以上を指定してください")
    
    # 割り算
    return total / people


# --------------------------------------------------
# パターン4: クラスのdocstring
# --------------------------------------------------
class PremiumDaifukuShop:
    """
    プレミアム大福店クラス。
    
    基本的な販売機能に加えて、VIP会員管理機能を提供する。
    
    Attributes
    ----------
    owner_name : str
        店長の名前
    stock : int
        現在の在庫数
    vip_count : int
        VIP会員数
    
    Methods
    -------
    sell(quantity)
        大福を販売する
    add_vip(count)
        VIP会員を追加する
    
    Examples
    --------
    >>> shop = PremiumDaifukuShop("もちもち", 100, 5)
    >>> shop.sell(10)
    True
    """
    # クラスのdocstring（NumPy版）:
    # 1. クラスの説明
    # 2. Attributes: 属性の説明
    # 3. Methods: メソッドの一覧
    # 4. Examples: 使用例
    
    def __init__(self, owner_name, stock, vip_count):
        """
        プレミアム大福店を初期化する。
        
        Parameters
        ----------
        owner_name : str
            店長の名前
        stock : int
            初期在庫数
        vip_count : int
            初期VIP会員数
        """
        self.owner_name = owner_name
        self.stock = stock
        self.vip_count = vip_count
    
    def sell(self, quantity):
        """
        大福を販売する。
        
        Parameters
        ----------
        quantity : int
            販売する個数
        
        Returns
        -------
        bool
            販売成功ならTrue、在庫不足ならFalse
        """
        if quantity > self.stock:
            return False
        self.stock -= quantity
        return True
    
    def add_vip(self, count=1):
        """
        VIP会員を追加する。
        
        Parameters
        ----------
        count : int, optional
            追加する会員数。デフォルトは1
        """
        # optional: デフォルト値がある引数
        self.vip_count += count


# --------------------------------------------------
# NumPyスタイルの動作確認
# --------------------------------------------------
print("\n【NumPyスタイルの例】")
print("-"*70)

# 基本形
result = sell_daifuku_numpy(10, 150)
print(f"売上: {result}円")

# 複数の戻り値
total, avg, max_val = calculate_stats([10, 20, 15])
print(f"合計: {total}, 平均: {avg}, 最大: {max_val}")

# 例外と注意事項
per_person = divide_daifuku(100, 3)
print(f"1人あたり: {per_person:.2f}個")

# クラス
premium_shop = PremiumDaifukuShop("もちもち", 100, 5)
premium_shop.sell(10)
premium_shop.add_vip(2)
print(f"VIP会員: {premium_shop.vip_count}名")


# ====================================
# 第3部: reSTスタイル
# ====================================

print("\n" + "="*70)
print("【第3部】reSTスタイル - Sphinx用")
print("="*70)

# --------------------------------------------------
# パターン1: 基本形
# --------------------------------------------------
def sell_daifuku_rest(quantity, price):
    """
    大福を販売して合計金額を計算する。
    
    :param quantity: 販売する大福の個数
    :type quantity: int
    :param price: 1個あたりの価格（円）
    :type price: int
    :return: 合計金額（円）
    :rtype: int
    
    .. code-block:: python
    
       >>> sell_daifuku_rest(10, 150)
       1500
    """
    # :param 引数名: 引数の説明
    # :type 引数名: 引数の型
    # param と type はセットで書く
    
    # :return: 戻り値の説明
    # :rtype: 戻り値の型
    # return と rtype もセット
    
    # .. code-block:: python
    #    使用例のコードブロック
    
    return quantity * price


# --------------------------------------------------
# パターン2: 例外を含む
# --------------------------------------------------
def add_stock_rest(current, amount):
    """
    在庫を追加する。
    
    :param current: 現在の在庫数
    :type current: int
    :param amount: 追加する在庫数
    :type amount: int
    :return: 更新後の在庫数
    :rtype: int
    :raises ValueError: amountが負の値の場合
    """
    # :raises 例外名: 発生条件
    # 1行で書く
    
    if amount < 0:
        raise ValueError("追加量は0以上を指定してください")
    
    return current + amount


# --------------------------------------------------
# パターン3: デフォルト引数と警告
# --------------------------------------------------
def calculate_discount(price, rate=0.1):
    """
    割引後の価格を計算する。
    
    :param price: 元の価格（円）
    :type price: int
    :param rate: 割引率（デフォルト: 0.1）
    :type rate: float
    :return: 割引後の価格（円）
    :rtype: int
    
    .. note::
       rateは0.0〜1.0の範囲で指定してください。
    
    .. warning::
       rateが範囲外の場合、予期しない結果になります。
    """
    # デフォルト引数:
    # 説明に「デフォルト: 値」を書く
    
    # .. note:: 注意事項
    # .. warning:: 警告
    # これらはSphinxで特別な表示になる
    
    return int(price * (1 - rate))


# --------------------------------------------------
# パターン4: クラスのdocstring
# --------------------------------------------------
class VIPDaifukuShop:
    """
    VIP専門大福店クラス。
    
    プレミアム機能に加えて、コンシェルジュサービスを提供する。
    
    :ivar owner_name: 店長の名前
    :vartype owner_name: str
    :ivar stock: 現在の在庫数
    :vartype stock: int
    :ivar concierge_count: コンシェルジュの人数
    :vartype concierge_count: int
    """
    # クラスのdocstring（reST版）:
    # :ivar 変数名: インスタンス変数の説明
    # :vartype 変数名: インスタンス変数の型
    
    def __init__(self, owner_name, stock, concierge_count):
        """
        VIP専門大福店を初期化する。
        
        :param owner_name: 店長の名前
        :type owner_name: str
        :param stock: 初期在庫数
        :type stock: int
        :param concierge_count: コンシェルジュの人数
        :type concierge_count: int
        """
        self.owner_name = owner_name
        self.stock = stock
        self.concierge_count = concierge_count
    
    def sell_vip(self, quantity):
        """
        VIP限定販売を行う。
        
        :param quantity: 販売する個数
        :type quantity: int
        :return: 販売成功ならTrue
        :rtype: bool
        """
        if quantity > self.stock:
            return False
        self.stock -= quantity
        return True


# --------------------------------------------------
# reSTスタイルの動作確認
# --------------------------------------------------
print("\n【reSTスタイルの例】")
print("-"*70)

# 基本形
result = sell_daifuku_rest(10, 150)
print(f"売上: {result}円")

# 例外を含む
stock = add_stock_rest(100, 50)
print(f"在庫: {stock}個")

# デフォルト引数
discounted = calculate_discount(1000, 0.2)
print(f"割引後: {discounted}円")

# クラス
vip_shop = VIPDaifukuShop("ぴょんぴょん", 100, 3)
vip_shop.sell_vip(10)
print(f"VIP店在庫: {vip_shop.stock}個")


# ====================================
# 第4部: 書き換え実践
# ====================================

print("\n" + "="*70)
print("【第4部】書き換え実践 - 同じ関数を3スタイルで")
print("="*70)

# --------------------------------------------------
# ビフォー: docstringなし
# --------------------------------------------------
def calc_before(x, y, z=10):
    # 何をする関数？
    if y == 0:
        raise ValueError("y cannot be zero")
    return x / y + z


# --------------------------------------------------
# アフター1: Google版
# --------------------------------------------------
def calc_google(x, y, z=10):
    """
    (x / y) + z を計算する。
    
    Args:
        x (float): 割られる数
        y (float): 割る数
        z (float, optional): 加算する数。デフォルトは10
    
    Returns:
        float: 計算結果
    
    Raises:
        ValueError: yが0の場合
    
    Examples:
        >>> calc_google(20, 2, 5)
        15.0
    """
    if y == 0:
        raise ValueError("y cannot be zero")
    return x / y + z


# --------------------------------------------------
# アフター2: NumPy版
# --------------------------------------------------
def calc_numpy(x, y, z=10):
    """
    (x / y) + z を計算する。
    
    Parameters
    ----------
    x : float
        割られる数
    y : float
        割る数
    z : float, optional
        加算する数。デフォルトは10
    
    Returns
    -------
    float
        計算結果
    
    Raises
    ------
    ValueError
        yが0の場合
    
    Examples
    --------
    >>> calc_numpy(20, 2, 5)
    15.0
    """
    if y == 0:
        raise ValueError("y cannot be zero")
    return x / y + z


# --------------------------------------------------
# アフター3: reST版
# --------------------------------------------------
def calc_rest(x, y, z=10):
    """
    (x / y) + z を計算する。
    
    :param x: 割られる数
    :type x: float
    :param y: 割る数
    :type y: float
    :param z: 加算する数（デフォルト: 10）
    :type z: float
    :return: 計算結果
    :rtype: float
    :raises ValueError: yが0の場合
    
    .. code-block:: python
    
       >>> calc_rest(20, 2, 5)
       15.0
    """
    if y == 0:
        raise ValueError("y cannot be zero")
    return x / y + z


# --------------------------------------------------
# 書き換え結果の確認
# --------------------------------------------------
print("\n【書き換え結果の比較】")
print("-"*70)

# ビフォー
result_before = calc_before(20, 2, 5)
print(f"ビフォー: {result_before}")

# Google版
result_google = calc_google(20, 2, 5)
print(f"Google版: {result_google}")

# NumPy版
result_numpy = calc_numpy(20, 2, 5)
print(f"NumPy版: {result_numpy}")

# reST版
result_rest = calc_rest(20, 2, 5)
print(f"reST版: {result_rest}")


# ====================================
# 第5部: チートシート
# ====================================

print("\n" + "="*70)
print("【第5部】チートシート - 書き方まとめ")
print("="*70)

print("""
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  Googleスタイル テンプレート          ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

def 関数名(引数1, 引数2=デフォルト値):
    \"\"\"
    関数の簡潔な説明（1行）
    
    Args:
        引数1 (型): 説明
        引数2 (型, optional): 説明。デフォルトは値
    
    Returns:
        型: 説明
    
    Raises:
        例外名: 説明
    
    Examples:
        >>> 関数名(値1, 値2)
        結果
    \"\"\"


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  NumPyスタイル テンプレート            ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

def 関数名(引数1, 引数2=デフォルト値):
    \"\"\"
    関数の簡潔な説明
    
    Parameters
    ----------
    引数1 : 型
        説明
    引数2 : 型, optional
        説明。デフォルトは値
    
    Returns
    -------
    型
        説明
    
    Raises
    ------
    例外名
        説明
    
    Examples
    --------
    >>> 関数名(値1, 値2)
    結果
    \"\"\"


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  reSTスタイル テンプレート             ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

def 関数名(引数1, 引数2=デフォルト値):
    \"\"\"
    関数の簡潔な説明
    
    :param 引数1: 説明
    :type 引数1: 型
    :param 引数2: 説明（デフォルト: 値）
    :type 引数2: 型
    :return: 説明
    :rtype: 型
    :raises 例外名: 説明
    \"\"\"
""")

print("\n" + "="*70)
print("【使い分けガイド】")
print("="*70)
print("""
Googleスタイル → 初心者・チーム開発・Web開発
NumPyスタイル  → データ分析・科学計算・研究
reSTスタイル   → 公式ドキュメント・大規模OSS

迷ったら → Googleスタイル！
""")

print("\n" + "="*70)
print("実行完了！help()で各関数を確認してみましょう")
print("例: help(sell_daifuku)")
print("="*70)

copy
"""
====================================
note記事用コード
🐰 ふわふわ大福店で学ぶ
Docstring 3大スタイル完全ガイド

新人エンジニア必見！
ビフォー→アフターで完全理解
====================================
"""

# ====================================
# はじめに: Docstringとは？
# ====================================

"""
Docstring = 関数の説明書

なぜ必要？
- コードを見ただけでは「何をするか」わからない
- help()で説明が表示される
- チームメンバーが理解しやすくなる
- 未来の自分が助かる

書かないと...
「このコード何だっけ？」と悩む日々が待っています
"""


# ====================================
# ビフォー: docstringなしの世界
# ====================================

# ----- ビフォー: 説明がない -----
def sell(q, p):
    # q? p? 何これ？
    return q * p

# 問題点:
# - 引数の意味がわからない
# - 何を返すかわからない
# - 使い方がわからない


# ====================================
# スタイル1: Googleスタイル（初心者向け）
# ====================================

"""
【特徴】
✓ 読みやすい
✓ 書きやすい  
✓ チーム開発で人気No.1
✓ 初心者に最適

【使う場面】
- Webアプリ開発
- 小〜中規模プロジェクト
- スタートアップ
- 迷ったらこれ！

【キーワード】
Args: 引数
Returns: 戻り値
Raises: 例外
"""

# ----- アフター1: Googleスタイル -----
def sell_daifuku_google(quantity, price):
    """
    大福を販売して合計金額を計算する。
    
    Args:
        quantity (int): 販売する大福の個数
        price (int): 1個あたりの価格（円）
    
    Returns:
        int: 合計金額（円）
    """
    # Args: 引数の説明
    # 引数名 (型): 説明 の形式
    # シンプルで読みやすい
    
    return quantity * price


# ----- 例外も書く（Google） -----
def divide_daifuku_google(total, people):
    """
    大福を人数で割る。
    
    Args:
        total (int): 大福の総数
        people (int): 分ける人数
    
    Returns:
        float: 1人あたりの個数
    
    Raises:
        ValueError: peopleが0以下の場合
    """
    # Raises: 発生する例外を説明
    # 例外名: 発生条件 の形式
    
    if people <= 0:
        raise ValueError("人数は1以上")
    return total / people


# ----- 使用例も書く（Google） -----
def discount_google(price, rate):
    """
    割引後の価格を計算する。
    
    Args:
        price (int): 元の価格（円）
        rate (float): 割引率（0.0〜1.0）
    
    Returns:
        int: 割引後の価格（円）
    
    Examples:
        >>> discount_google(1000, 0.2)
        800
    """
    # Examples: 使用例
    # >>> で始めると自動テスト可能
    
    return int(price * (1 - rate))


# ====================================
# スタイル2: NumPyスタイル（科学技術系）
# ====================================

"""
【特徴】
✓ 詳しく書ける
✓ 見やすい（表形式）
✓ データサイエンス標準
✓ NumPy/Pandas/SciPyで採用

【使う場面】
- データ分析
- 機械学習
- 科学計算
- 研究開発

【キーワード】
Parameters: 引数
Returns: 戻り値
Raises: 例外
Notes: 注意事項
"""

# ----- アフター2: NumPyスタイル -----
def sell_daifuku_numpy(quantity, price):
    """
    大福を販売して合計金額を計算する。
    
    Parameters
    ----------
    quantity : int
        販売する大福の個数
    price : int
        1個あたりの価格（円）
    
    Returns
    -------
    int
        合計金額（円）
    """
    # Parameters の下に -------- (8個以上)
    # 引数名 : 型 の形式
    # 説明は次の行にインデント
    
    # Returns の下に ------- (7個以上)
    # 型を書く
    # 説明は次の行にインデント
    
    return quantity * price


# ----- 複数の戻り値（NumPy） -----
def stats_numpy(sales):
    """
    販売統計を計算する。
    
    Parameters
    ----------
    sales : list of int
        各日の販売数
    
    Returns
    -------
    total : int
        合計販売数
    average : float
        平均販売数
    max_sales : int
        最大販売数
    """
    # 複数の戻り値:
    # 戻り値名 : 型 の形式で全部書く
    # 各戻り値ごとに説明
    
    total = sum(sales)
    average = total / len(sales)
    max_sales = max(sales)
    return total, average, max_sales


# ----- 注意事項も書く（NumPy） -----
def divide_daifuku_numpy(total, people):
    """
    大福を人数で割る。
    
    Parameters
    ----------
    total : int
        大福の総数
    people : int
        分ける人数
    
    Returns
    -------
    float
        1人あたりの個数
    
    Raises
    ------
    ValueError
        peopleが0以下の場合
    
    Notes
    -----
    小数点以下も返します。
    整数が必要な場合はint()で変換してください。
    """
    # Raises: 例外名だけ書いて説明は次の行
    # Notes: 重要な注意事項を詳しく
    
    if people <= 0:
        raise ValueError("人数は1以上")
    return total / people


# ====================================
# スタイル3: reSTスタイル（Sphinx用）
# ====================================

"""
【特徴】
✓ Sphinxで自動ドキュメント生成
✓ 公式ドキュメント向け
✓ 型情報が明確
✓ 大規模プロジェクト向け

【使う場面】
- OSSライブラリ開発
- 公式ドキュメント作成
- 大規模プロジェクト
- Python標準ライブラリレベル

【キーワード】
:param: 引数
:type: 型
:return: 戻り値
:rtype: 戻り値の型
:raises: 例外
"""

# ----- アフター3: reSTスタイル -----
def sell_daifuku_rest(quantity, price):
    """
    大福を販売して合計金額を計算する。
    
    :param quantity: 販売する大福の個数
    :type quantity: int
    :param price: 1個あたりの価格（円）
    :type price: int
    :return: 合計金額（円）
    :rtype: int
    """
    # :param 引数名: 引数の説明
    # :type 引数名: 引数の型
    # param と type はセット
    
    # :return: 戻り値の説明
    # :rtype: 戻り値の型
    # return と rtype もセット
    
    return quantity * price


# ----- 例外も書く（reST） -----
def divide_daifuku_rest(total, people):
    """
    大福を人数で割る。
    
    :param total: 大福の総数
    :type total: int
    :param people: 分ける人数
    :type people: int
    :return: 1人あたりの個数
    :rtype: float
    :raises ValueError: peopleが0以下の場合
    """
    # :raises 例外名: 発生条件
    # 1行で書く
    
    if people <= 0:
        raise ValueError("人数は1以上")
    return total / people


# ----- デフォルト引数（reST） -----
def discount_rest(price, rate=0.1):
    """
    割引後の価格を計算する。
    
    :param price: 元の価格（円）
    :type price: int
    :param rate: 割引率（デフォルト: 0.1）
    :type rate: float
    :return: 割引後の価格（円）
    :rtype: int
    """
    # デフォルト値がある場合:
    # 説明の中に「デフォルト: 値」を書く
    
    return int(price * (1 - rate))


# ====================================
# 3スタイル徹底比較
# ====================================

"""
同じ関数を3スタイルで書き比べ
"""

# ----- 比較: Google版 -----
def calculate_total_google(qty, price, tax=0.1):
    """
    税込み合計を計算（Google版）。
    
    Args:
        qty (int): 個数
        price (int): 単価（円）
        tax (float, optional): 消費税率。デフォルト0.1
    
    Returns:
        int: 税込み合計（円）
    """
    return int(qty * price * (1 + tax))


# ----- 比較: NumPy版 -----
def calculate_total_numpy(qty, price, tax=0.1):
    """
    税込み合計を計算（NumPy版）。
    
    Parameters
    ----------
    qty : int
        個数
    price : int
        単価（円）
    tax : float, optional
        消費税率。デフォルト0.1
    
    Returns
    -------
    int
        税込み合計（円）
    """
    return int(qty * price * (1 + tax))


# ----- 比較: reST版 -----
def calculate_total_rest(qty, price, tax=0.1):
    """
    税込み合計を計算（reST版）。
    
    :param qty: 個数
    :type qty: int
    :param price: 単価（円）
    :type price: int
    :param tax: 消費税率（デフォルト: 0.1）
    :type tax: float
    :return: 税込み合計（円）
    :rtype: int
    """
    return int(qty * price * (1 + tax))


# ====================================
# 書き換え練習: ビフォー→アフター
# ====================================

# ----- 練習1: ビフォー -----
def add(a, b):
    # 説明なし
    return a + b


# ----- 練習1: アフター（Google） -----
def add_google(a, b):
    """
    2つの数を足し算する。
    
    Args:
        a (int): 1つ目の数
        b (int): 2つ目の数
    
    Returns:
        int: a + b の結果
    """
    return a + b


# ----- 練習1: アフター（NumPy） -----
def add_numpy(a, b):
    """
    2つの数を足し算する。
    
    Parameters
    ----------
    a : int
        1つ目の数
    b : int
        2つ目の数
    
    Returns
    -------
    int
        a + b の結果
    """
    return a + b


# ----- 練習1: アフター（reST） -----
def add_rest(a, b):
    """
    2つの数を足し算する。
    
    :param a: 1つ目の数
    :type a: int
    :param b: 2つ目の数
    :type b: int
    :return: a + b の結果
    :rtype: int
    """
    return a + b


# ----- 練習2: ビフォー -----
def calc(x, y, z=10):
    # 引数多い、デフォルト値あり
    if y == 0:
        raise ValueError("y is zero")
    return x / y + z


# ----- 練習2: アフター（Google） -----
def calc_google(x, y, z=10):
    """
    x / y + z を計算する。
    
    Args:
        x (float): 割られる数
        y (float): 割る数
        z (float, optional): 加算する数。デフォルト10
    
    Returns:
        float: 計算結果
    
    Raises:
        ValueError: yが0の場合
    """
    if y == 0:
        raise ValueError("y is zero")
    return x / y + z


# ----- 練習2: アフター（NumPy） -----
def calc_numpy(x, y, z=10):
    """
    x / y + z を計算する。
    
    Parameters
    ----------
    x : float
        割られる数
    y : float
        割る数
    z : float, optional
        加算する数。デフォルト10
    
    Returns
    -------
    float
        計算結果
    
    Raises
    ------
    ValueError
        yが0の場合
    """
    if y == 0:
        raise ValueError("y is zero")
    return x / y + z


# ----- 練習2: アフター（reST） -----
def calc_rest(x, y, z=10):
    """
    x / y + z を計算する。
    
    :param x: 割られる数
    :type x: float
    :param y: 割る数
    :type y: float
    :param z: 加算する数（デフォルト: 10）
    :type z: float
    :return: 計算結果
    :rtype: float
    :raises ValueError: yが0の場合
    """
    if y == 0:
        raise ValueError("y is zero")
    return x / y + z


# ====================================
# まとめ: 3スタイル比較表
# ====================================

"""
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  3スタイル比較表（MECE分類）           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

【1. 読みやすさ】
Google  : ★★★★★  一目で理解
NumPy   : ★★★★☆  表形式で見やすい
reST    : ★★★☆☆  記号が多い

【2. 書きやすさ】
Google  : ★★★★★  サクサク書ける
NumPy   : ★★★☆☆  ハイフン面倒
reST    : ★★☆☆☆  パラメータ2行ずつ

【3. 人気度】
Google  : ★★★★★  業界標準
NumPy   : ★★★★☆  データ系で人気
reST    : ★★★☆☆  老舗

【4. 詳細度】
Google  : ★★★★☆  必要十分
NumPy   : ★★★★★  超詳細
reST    : ★★★★★  型情報明確

【5. 使う場面】
Google  : 一般開発・チーム開発
NumPy   : データ分析・科学計算
reST    : 公式Doc・大規模OSS

【6. 学習コスト】
Google  : 低い   30分で習得
NumPy   : 中程度 1時間で習得
reST    : やや高 2時間で習得

【結論】
迷ったら → Googleスタイル
データ系 → NumPyスタイル
公式Doc → reSTスタイル
"""


# ====================================
# 書き換えのコツ
# ====================================

"""
【Google → NumPy への書き換え】

ステップ1: Argsを変更
Args:
  ↓
Parameters
----------

ステップ2: 型の書き方を変更
quantity (int): 説明
  ↓
quantity : int
    説明

ステップ3: Returnsを変更
Returns:
    int: 説明
  ↓
Returns
-------
int
    説明


【Google → reST への書き換え】

ステップ1: Argsを削除して個別に
Args:
    quantity (int): 説明
  ↓
:param quantity: 説明
:type quantity: int

ステップ2: Returnsを変更
Returns:
    int: 説明
  ↓
:return: 説明
:rtype: int

ステップ3: Raisesを変更
Raises:
    ValueError: 説明
  ↓
:raises ValueError: 説明


【NumPy → Google への書き換え】

逆の手順でOK！
ハイフンを削除
型の位置を変更
"""


# ====================================
# 実践のコツ
# ====================================

"""
【書く順番】
1. 関数を作る
2. 動作確認
3. docstringを書く
4. help()で確認

【チェックリスト】
□ 三重引用符で囲んだ
□ 関数直後に書いた
□ 全引数を説明した
□ 戻り値を説明した
□ 例外を説明した
□ スペルチェックした

【ツール活用】
VS Code: Python Docstring Generator
PyCharm: 組み込み生成機能
コマンド: pydocstyle でチェック

【型ヒント併用】
def add(a: int, b: int) -> int:
    \"\"\"
    2つの数を足す。
    
    Args:
        a: 1つ目（型ヒントで既に指定）
        b: 2つ目（型ヒントで既に指定）
    
    Returns:
        合計（型ヒントで既に指定）
    \"\"\"
    return a + b

型ヒントがあれば、
docstringで型を省略できる！
"""


# ====================================
# 最後に
# ====================================

print("""
━━━━━━━━━━━━━━━━━━━━━━━━━━
  🐰 まとめ
━━━━━━━━━━━━━━━━━━━━━━━━━━

【重要ポイント】
✓ 初心者 → Googleスタイル
✓ データ系 → NumPyスタイル  
✓ 公式Doc → reSTスタイル
✓ 迷ったらGoogle！

【今日からできること】
1. 新しい関数にdocstringを書く
2. 古い関数にdocstringを追加
3. help()で確認する習慣

【次のステップ】
Week 1: Googleスタイル習得
Week 2: 全関数に適用
Week 3: 他スタイルも試す

未来の自分とチームのために、
今日からdocstringを書きましょう！
━━━━━━━━━━━━━━━━━━━━━━━━━━
""")

copy


"""
====================================
🐰 ふわふわ大福店で学ぶ
Docstring完全ガイド
新人エンジニア向けチートシート
====================================

Python 3大記法を完全マスター！
1. Googleスタイル（初心者向け・シンプル）
2. NumPyスタイル（科学技術系・詳細）
3. reSTスタイル（Sphinx用・公式）
"""

# ====================================
# 第0部: Docstringとは？
# ====================================

print("="*70)
print("【第0部】Docstringの基本を理解しよう")
print("="*70)

"""
Docstring（ドックストリング）= 関数・クラス・モジュールの説明文

役割:
1. 関数が何をするか説明する
2. help()で表示される
3. ドキュメント自動生成ツールが読む
4. 他の人（未来の自分含む）がコードを理解しやすくなる

書く場所:
    関数定義の直後、三重引用符で囲む

書かないと:
    「何の関数かわからないブラックボックス」になる
"""

# ----- 悪い例: docstringなし -----
def bad_example(a, b):
    # これだと何をする関数かわからない...
    return a * b


# ----- 良い例: docstringあり -----
def good_example(a, b):
    """
    2つの数を掛け算して返す関数
    
    引数:
        a: 1つ目の数
        b: 2つ目の数
    
    戻り値:
        a と b の積
    """
    return a * b


# help()で確認してみよう
print("\n【悪い例のhelp()】")
print("help(bad_example)")
# 出力: bad_example(a, b) ← 説明がない！

print("\n【良い例のhelp()】")
print("help(good_example)")
# 出力: 2つの数を掛け算して返す関数 ← 説明がある！


# ====================================
# 第1部: Googleスタイル（初心者推奨）
# ====================================

print("\n" + "="*70)
print("【第1部】Googleスタイル - 初心者に最適！")
print("="*70)

"""
【Googleスタイルの特徴】

長所:
✅ シンプルで読みやすい
✅ 書きやすい
✅ チーム開発で人気No.1
✅ 機械にも人間にも優しい

短所:
❌ 特になし（バランスが良い）

よく使うキーワード:
- Args: 引数の説明
- Returns: 戻り値の説明
- Raises: 例外の説明
- Examples: 使用例
- Note: 注意事項
"""

# ----- パターン1: 基本の書き方 -----
def sell_daifuku(quantity, price):
    """
    大福を販売して合計金額を計算する。
    
    Args:
        quantity (int): 販売する大福の個数
        price (int): 1個あたりの価格（円）
    
    Returns:
        int: 合計金額（円）
    """
    # Args: の下に引数を列挙
    # 引数名 (型): 説明 の形式
    # Returns: の下に戻り値を説明
    
    return quantity * price


# ----- パターン2: 例外も書く -----
def divide_daifuku(total, people):
    """
    大福を人数で割って1人あたりの個数を計算する。
    
    Args:
        total (int): 大福の総数
        people (int): 分ける人数
    
    Returns:
        float: 1人あたりの個数
    
    Raises:
        ValueError: peopleが0以下の場合
    """
    # Raises: 発生する可能性のある例外を説明
    # 例外名: どんな時に発生するか の形式
    
    if people <= 0:
        raise ValueError("人数は1以上にしてください")
    return total / people


# ----- パターン3: 使用例も書く -----
def calculate_discount(price, discount_rate):
    """
    割引後の価格を計算する。
    
    Args:
        price (int): 元の価格（円）
        discount_rate (float): 割引率（0.0〜1.0）
    
    Returns:
        int: 割引後の価格（円）
    
    Raises:
        ValueError: discount_rateが0〜1の範囲外の場合
    
    Examples:
        >>> calculate_discount(1000, 0.2)
        800
        >>> calculate_discount(1500, 0.5)
        750
    """
    # Examples: 使用例を書く
    # >>> で始めると、doctestで自動テスト可能
    
    if not 0 <= discount_rate <= 1:
        raise ValueError("割引率は0〜1の範囲で指定してください")
    return int(price * (1 - discount_rate))


# ----- パターン4: クラスのdocstring -----
class DaifukuShop:
    """
    大福店クラス。
    
    在庫管理と販売機能を提供する。
    
    Attributes:
        owner_name (str): 店長の名前
        stock (int): 現在の在庫数
        sold (int): 累計販売数
    
    Examples:
        >>> shop = DaifukuShop("うさうさ", 100)
        >>> shop.sell(10)
        True
        >>> shop.stock
        90
    """
    # クラスのdocstring:
    # 1. クラスの説明
    # 2. Attributes: インスタンス変数の説明
    # 3. Examples: 使用例
    
    def __init__(self, owner_name, stock):
        """
        大福店を初期化する。
        
        Args:
            owner_name (str): 店長の名前
            stock (int): 初期在庫数
        """
        # __init__のdocstring:
        # コンストラクタの引数を説明
        
        self.owner_name = owner_name
        self.stock = stock
        self.sold = 0
    
    def sell(self, quantity):
        """
        大福を販売する。
        
        Args:
            quantity (int): 販売する個数
        
        Returns:
            bool: 販売成功ならTrue、在庫不足ならFalse
        
        Note:
            在庫が不足している場合は販売せず、Falseを返す。
        """
        # Note: 重要な注意事項を書く
        
        if quantity > self.stock:
            return False
        
        self.stock -= quantity
        self.sold += quantity
        return True


# ====================================
# 第2部: NumPyスタイル（科学技術系）
# ====================================

print("\n" + "="*70)
print("【第2部】NumPyスタイル - データサイエンス向け")
print("="*70)

"""
【NumPyスタイルの特徴】

長所:
✅ 詳細に書ける
✅ 見やすい（表形式っぽい）
✅ NumPy、Pandas、SciPyで標準

短所:
❌ 書くのが少し手間
❌ 行数が多くなる

よく使うキーワード:
- Parameters: 引数の説明
- Returns: 戻り値の説明
- Raises: 例外の説明
- Examples: 使用例
- Notes: 注意事項
- See Also: 関連関数

特徴:
- Parameters の下に -------- （ハイフン8個以上）
- 引数名 : 型 の形式
- 説明は次の行にインデント
"""

# ----- パターン1: 基本の書き方 -----
def sell_daifuku_numpy(quantity, price):
    """
    大福を販売して合計金額を計算する。
    
    Parameters
    ----------
    quantity : int
        販売する大福の個数
    price : int
        1個あたりの価格（円）
    
    Returns
    -------
    int
        合計金額（円）
    """
    # Parameters の書き方:
    # 1. Parameters の下に -------- を書く
    # 2. 引数名 : 型 の形式
    # 3. 説明は次の行にインデント（4スペース）
    
    # Returns の書き方:
    # 1. Returns の下に ------- を書く
    # 2. 型を書く
    # 3. 説明は次の行にインデント
    
    return quantity * price


# ----- パターン2: 複数の戻り値 -----
def calculate_sales_stats(sales_list):
    """
    販売統計を計算する。
    
    Parameters
    ----------
    sales_list : list of int
        各日の販売数のリスト
    
    Returns
    -------
    total : int
        合計販売数
    average : float
        平均販売数
    max_sales : int
        最大販売数
    
    Examples
    --------
    >>> calculate_sales_stats([10, 20, 15])
    (45, 15.0, 20)
    """
    # 複数の戻り値がある場合:
    # 戻り値名 : 型 の形式で全部書く
    
    # Examples の書き方:
    # Examples の下に -------- を書く
    # >>> で始める（doctestで自動テスト可能）
    
    total = sum(sales_list)
    average = total / len(sales_list)
    max_sales = max(sales_list)
    return total, average, max_sales


# ----- パターン3: 例外と注意事項 -----
def divide_daifuku_numpy(total, people):
    """
    大福を人数で割って1人あたりの個数を計算する。
    
    Parameters
    ----------
    total : int
        大福の総数
    people : int
        分ける人数
    
    Returns
    -------
    float
        1人あたりの個数
    
    Raises
    ------
    ValueError
        peopleが0以下の場合
    
    Notes
    -----
    この関数は小数点以下も返すため、
    整数が必要な場合はint()で変換してください。
    
    See Also
    --------
    sell_daifuku_numpy : 大福の販売計算
    """
    # Raises の書き方:
    # Raises の下に ------ を書く
    # 例外名だけ書いて、説明は次の行
    
    # Notes の書き方:
    # Notes の下に ----- を書く
    # 重要な注意事項を詳しく書く
    
    # See Also の書き方:
    # See Also の下に -------- を書く
    # 関連する関数名 : 簡単な説明
    
    if people <= 0:
        raise ValueError("人数は1以上にしてください")
    return total / people


# ----- パターン4: クラスのdocstring -----
class PremiumDaifukuShop:
    """
    プレミアム大福店クラス。
    
    基本的な販売機能に加えて、VIP会員管理機能を提供する。
    
    Attributes
    ----------
    owner_name : str
        店長の名前
    stock : int
        現在の在庫数
    vip_count : int
        VIP会員数
    
    Methods
    -------
    sell(quantity)
        大福を販売する
    add_vip(count)
        VIP会員を追加する
    
    Examples
    --------
    >>> shop = PremiumDaifukuShop("もちもち", 100, 5)
    >>> shop.sell(10)
    True
    """
    # クラスのdocstring（NumPy版）:
    # 1. クラスの説明
    # 2. Attributes: 属性の説明
    # 3. Methods: メソッドの一覧
    # 4. Examples: 使用例
    
    def __init__(self, owner_name, stock, vip_count):
        """
        プレミアム大福店を初期化する。
        
        Parameters
        ----------
        owner_name : str
            店長の名前
        stock : int
            初期在庫数
        vip_count : int
            初期VIP会員数
        """
        self.owner_name = owner_name
        self.stock = stock
        self.vip_count = vip_count
    
    def sell(self, quantity):
        """
        大福を販売する。
        
        Parameters
        ----------
        quantity : int
            販売する個数
        
        Returns
        -------
        bool
            販売成功ならTrue、在庫不足ならFalse
        """
        if quantity > self.stock:
            return False
        self.stock -= quantity
        return True


# ====================================
# 第3部: reSTスタイル（Sphinx用）
# ====================================

print("\n" + "="*70)
print("【第3部】reSTスタイル - 公式ドキュメント向け")
print("="*70)

"""
【reSTスタイルの特徴】

長所:
✅ Sphinxで自動ドキュメント生成できる
✅ 公式ドキュメント作成に最適
✅ 型情報が明確

短所:
❌ 書くのが面倒
❌ 冗長になりやすい

よく使うキーワード:
- :param 引数名: 引数の説明
- :type 引数名: 引数の型
- :return: 戻り値の説明
- :rtype: 戻り値の型
- :raises 例外名: 例外の説明

特徴:
- コロン : で始まる
- param と type を分けて書く
"""

# ----- パターン1: 基本の書き方 -----
def sell_daifuku_rest(quantity, price):
    """
    大福を販売して合計金額を計算する。
    
    :param quantity: 販売する大福の個数
    :type quantity: int
    :param price: 1個あたりの価格（円）
    :type price: int
    :return: 合計金額（円）
    :rtype: int
    """
    # :param 引数名: 引数の説明
    # :type 引数名: 引数の型
    # 
    # param と type はセットで書く
    # 各引数ごとに2行ずつ必要
    
    # :return: 戻り値の説明
    # :rtype: 戻り値の型
    
    return quantity * price


# ----- パターン2: 例外も書く -----
def divide_daifuku_rest(total, people):
    """
    大福を人数で割って1人あたりの個数を計算する。
    
    :param total: 大福の総数
    :type total: int
    :param people: 分ける人数
    :type people: int
    :return: 1人あたりの個数
    :rtype: float
    :raises ValueError: peopleが0以下の場合
    """
    # :raises 例外名: 例外の説明
    # 
    # 例外が複数ある場合は、複数行書く
    # :raises ValueError: ...
    # :raises TypeError: ...
    
    if people <= 0:
        raise ValueError("人数は1以上にしてください")
    return total / people


# ----- パターン3: 複雑な型 -----
def process_orders(order_list, discount_rate=0.0):
    """
    複数の注文を処理して合計金額を計算する。
    
    :param order_list: 注文のリスト（各要素は(個数, 単価)のタプル）
    :type order_list: list of tuple
    :param discount_rate: 割引率（デフォルト: 0.0）
    :type discount_rate: float, optional
    :return: 割引後の合計金額
    :rtype: int
    
    .. note::
       discount_rateは0.0〜1.0の範囲で指定してください。
    
    .. warning::
       order_listが空の場合、0を返します。
    """
    # 複雑な型の書き方:
    # list of tuple = タプルのリスト
    # float, optional = 省略可能なfloat型
    
    # .. note:: = 注意事項
    # .. warning:: = 警告
    # これらはSphinxで特別な表示になる
    
    if not order_list:
        return 0
    
    total = sum(qty * price for qty, price in order_list)
    return int(total * (1 - discount_rate))


# ----- パターン4: クラスのdocstring -----
class VIPDaifukuShop:
    """
    VIP専門大福店クラス。
    
    プレミアム機能に加えて、コンシェルジュサービスを提供する。
    
    :ivar owner_name: 店長の名前
    :vartype owner_name: str
    :ivar stock: 現在の在庫数
    :vartype stock: int
    :ivar concierge_count: コンシェルジュの人数
    :vartype concierge_count: int
    """
    # クラスのdocstring（reST版）:
    # :ivar 変数名: インスタンス変数の説明
    # :vartype 変数名: インスタンス変数の型
    
    def __init__(self, owner_name, stock, concierge_count):
        """
        VIP専門大福店を初期化する。
        
        :param owner_name: 店長の名前
        :type owner_name: str
        :param stock: 初期在庫数
        :type stock: int
        :param concierge_count: コンシェルジュの人数
        :type concierge_count: int
        """
        self.owner_name = owner_name
        self.stock = stock
        self.concierge_count = concierge_count


# ====================================
# 第4部: 3スタイル徹底比較
# ====================================

print("\n" + "="*70)
print("【第4部】3スタイル徹底比較 - 同じ関数で見比べる")
print("="*70)

# ----- Google版 -----
def calculate_total_google(quantity, unit_price, tax_rate=0.1):
    """
    税込み合計金額を計算する（Googleスタイル）。
    
    Args:
        quantity (int): 商品の個数
        unit_price (int): 単価（円）
        tax_rate (float, optional): 消費税率。デフォルトは0.1（10%）
    
    Returns:
        int: 税込み合計金額（円）
    
    Raises:
        ValueError: quantityまたはunit_priceが負の値の場合
    
    Examples:
        >>> calculate_total_google(10, 100)
        1100
        >>> calculate_total_google(5, 200, 0.08)
        1080
    """
    if quantity < 0 or unit_price < 0:
        raise ValueError("個数と単価は正の値を指定してください")
    
    subtotal = quantity * unit_price
    return int(subtotal * (1 + tax_rate))


# ----- NumPy版 -----
def calculate_total_numpy(quantity, unit_price, tax_rate=0.1):
    """
    税込み合計金額を計算する（NumPyスタイル）。
    
    Parameters
    ----------
    quantity : int
        商品の個数
    unit_price : int
        単価（円）
    tax_rate : float, optional
        消費税率。デフォルトは0.1（10%）
    
    Returns
    -------
    int
        税込み合計金額（円）
    
    Raises
    ------
    ValueError
        quantityまたはunit_priceが負の値の場合
    
    Examples
    --------
    >>> calculate_total_numpy(10, 100)
    1100
    >>> calculate_total_numpy(5, 200, 0.08)
    1080
    
    Notes
    -----
    計算結果は整数に変換されます。
    小数点以下は切り捨てられます。
    """
    if quantity < 0 or unit_price < 0:
        raise ValueError("個数と単価は正の値を指定してください")
    
    subtotal = quantity * unit_price
    return int(subtotal * (1 + tax_rate))


# ----- reST版 -----
def calculate_total_rest(quantity, unit_price, tax_rate=0.1):
    """
    税込み合計金額を計算する（reSTスタイル）。
    
    :param quantity: 商品の個数
    :type quantity: int
    :param unit_price: 単価（円）
    :type unit_price: int
    :param tax_rate: 消費税率。デフォルトは0.1（10%）
    :type tax_rate: float
    :return: 税込み合計金額（円）
    :rtype: int
    :raises ValueError: quantityまたはunit_priceが負の値の場合
    
    .. code-block:: python
    
       >>> calculate_total_rest(10, 100)
       1100
       >>> calculate_total_rest(5, 200, 0.08)
       1080
    
    .. note::
       計算結果は整数に変換されます。
    """
    if quantity < 0 or unit_price < 0:
        raise ValueError("個数と単価は正の値を指定してください")
    
    subtotal = quantity * unit_price
    return int(subtotal * (1 + tax_rate))


# ====================================
# 第5部: 書き方のコツ・書き換えのコツ
# ====================================

print("\n" + "="*70)
print("【第5部】Docstring書き方のコツ")
print("="*70)

"""
【コツ1】書く順番

ステップ1: まず関数を作る
def add(a, b):
    return a + b

ステップ2: 動作を確認する
print(add(1, 2))  # 3

ステップ3: docstringを書く
def add(a, b):
    \"\"\"
    2つの数を足し算する。
    
    Args:
        a (int): 1つ目の数
        b (int): 2つ目の数
    
    Returns:
        int: a + b の結果
    \"\"\"
    return a + b

ステップ4: テストを書く（doctestやpytest）


【コツ2】何を書くか

✅ 書くべきこと:
- 関数の目的（何をするか）
- 引数の説明（何を渡すか）
- 戻り値の説明（何が返るか）
- 例外の説明（どんなエラーが出るか）
- 使用例（どう使うか）
- 注意事項（気をつけること）

❌ 書かないこと:
- 内部処理の詳細（コメントに書く）
- 自明すぎること
- 変わりやすいこと


【コツ3】型ヒントと組み合わせる

型ヒントありの場合:
def add(a: int, b: int) -> int:
    \"\"\"
    2つの数を足し算する。
    
    Args:
        a: 1つ目の数（型ヒントで既に指定済み）
        b: 2つ目の数（型ヒントで既に指定済み）
    
    Returns:
        a + b の結果（型ヒントで既に指定済み）
    \"\"\"
    return a + b

型ヒントがあれば、docstringで型を省略できる！


【コツ4】スタイルの使い分け

プロジェクトの種類で選ぶ:
- Webアプリ開発 → Googleスタイル
- データ分析 → NumPyスタイル
- ライブラリ開発 → reSTスタイル

チームの規模で選ぶ:
- 小規模（1〜5人） → Googleスタイル
- 中規模（6〜20人） → GoogleまたはNumPy
- 大規模（21人〜） → reSTスタイル

迷ったら:
→ Googleスタイルを選ぶ！


【コツ5】書き換えのコツ

Google → NumPy:
1. Args を Parameters に変更
2. Parameters の下に -------- を追加
3. (型) を : 型 に変更
4. Returns を Returns に変更（同じ）
5. Returns の下に ------- を追加

Google → reST:
1. Args: を削除
2. 各引数を :param 引数名: 説明 に変更
3. 各引数の型を :type 引数名: 型 に変更
4. Returns: を :return: に変更
5. 戻り値の型を :rtype: 型 に変更


【コツ6】自動ツールを使う

VS Code拡張機能:
- Python Docstring Generator
  → """ を書くと自動でテンプレート生成

PyCharm:
- 関数名の下で """ を書いて Enter
  → 自動でdocstring生成

自動フォーマッター:
- black: コード整形
- isort: import文整理
- pydocstyle: docstringのスタイルチェック


【コツ7】チェックリスト

□ 三重引用符で囲んでいる
□ 関数の目的を1行目に書いている
□ 全ての引数を説明している
□ 戻り値を説明している
□ 例外を説明している（例外がある場合）
□ 使用例を書いている（複雑な関数の場合）
□ スペルミスがない
□ 文法が正しい
□ 読みやすい
□ 正確である
"""


# ====================================
# 第6部: 練習問題
# ====================================

print("\n" + "="*70)
print("【第6部】練習問題 - 実際に書いてみよう")
print("="*70)

# ----- 問題1: Googleスタイルで書く -----
def add_stock(current_stock, add_amount):
    """
    【ここにGoogleスタイルのdocstringを書く】
    
    TODO: 在庫を追加する関数のdocstringを書いてください
    
    ヒント:
    - Args: current_stock, add_amount
    - Returns: 新しい在庫数
    - Raises: add_amountが負の値の場合にValueError
    """
    if add_amount < 0:
        raise ValueError("追加量は正の値を指定してください")
    return current_stock + add_amount


# ----- 問題2: NumPyスタイルで書く -----
def calculate_average(numbers):
    """
    【ここにNumPyスタイルのdocstringを書く】
    
    TODO: 平均値を計算する関数のdocstringを書いてください
    
    ヒント:
    - Parameters: numbers (list of float)
    - Returns: 平均値 (float)
    - Raises: numbersが空の場合にValueError
    """
    if not numbers:
        raise ValueError("リストが空です")
    return sum(numbers) / len(numbers)


# ----- 問題3: reSTスタイルで書く -----
def create_shop(owner_name, stock, shop_type="basic"):
    """
    【ここにreSTスタイルのdocstringを書く】
    
    TODO: 店舗を作成する関数のdocstringを書いてください
    
    ヒント:
    - :param owner_name: 店長名 (str)
    - :param stock: 初期在庫 (int)
    - :param shop_type: 店舗タイプ、デフォルトは"basic" (str)
    - :return: 店舗の辞書 (dict)

copy
```python
    """
    【ここにreSTスタイルのdocstringを書く】
    
    TODO: 店舗を作成する関数のdocstringを書いてください
    
    ヒント:
    - :param owner_name: 店長名 (str)
    - :param stock: 初期在庫 (int)
    - :param shop_type: 店舗タイプ、デフォルトは"basic" (str)
    - :return: 店舗の辞書 (dict)
    """
    return {
        "owner": owner_name,
        "stock": stock,
        "type": shop_type
    }


# ----- 模範解答 -----

# 問題1の模範解答（Google）
def add_stock_answer(current_stock, add_amount):
    """
    在庫を追加する。
    
    Args:
        current_stock (int): 現在の在庫数
        add_amount (int): 追加する在庫数
    
    Returns:
        int: 新しい在庫数
    
    Raises:
        ValueError: add_amountが負の値の場合
    
    Examples:
        >>> add_stock_answer(100, 50)
        150
    """
    if add_amount < 0:
        raise ValueError("追加量は正の値を指定してください")
    return current_stock + add_amount


# 問題2の模範解答（NumPy）
def calculate_average_answer(numbers):
    """
    数値リストの平均値を計算する。
    
    Parameters
    ----------
    numbers : list of float
        平均を計算する数値のリスト
    
    Returns
    -------
    float
        平均値
    
    Raises
    ------
    ValueError
        numbersが空の場合
    
    Examples
    --------
    >>> calculate_average_answer([1.0, 2.0, 3.0])
    2.0
    """
    if not numbers:
        raise ValueError("リストが空です")
    return sum(numbers) / len(numbers)


# 問題3の模範解答（reST）
def create_shop_answer(owner_name, stock, shop_type="basic"):
    """
    店舗を作成する。
    
    :param owner_name: 店長の名前
    :type owner_name: str
    :param stock: 初期在庫数
    :type stock: int
    :param shop_type: 店舗タイプ（"basic", "premium", "vip"）
    :type shop_type: str
    :return: 店舗情報の辞書
    :rtype: dict
    
    .. code-block:: python
    
       >>> create_shop_answer("うさうさ", 100)
       {'owner': 'うさうさ', 'stock': 100, 'type': 'basic'}
    """
    return {
        "owner": owner_name,
        "stock": stock,
        "type": shop_type
    }


# ====================================
# 第7部: まとめとチートシート
# ====================================

print("\n" + "="*70)
print("【第7部】まとめ - Docstringチートシート")
print("="*70)

print("""
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  🐰 Docstring 3大スタイル 完全比較表              ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┌─────────────┬──────────────┬──────────────┬──────────────┐
│ 項目        │ Google       │ NumPy        │ reST         │
├─────────────┼──────────────┼──────────────┼──────────────┤
│ 読みやすさ  │ ★★★★★     │ ★★★★☆     │ ★★★☆☆     │
│ 書きやすさ  │ ★★★★★     │ ★★★☆☆     │ ★★☆☆☆     │
│ 人気度      │ ★★★★★     │ ★★★★☆     │ ★★★☆☆     │
│ 詳細度      │ ★★★★☆     │ ★★★★★     │ ★★★★★     │
├─────────────┼──────────────┼──────────────┼──────────────┤
│ 推奨用途    │ 一般開発     │ 科学計算     │ 公式Doc      │
│ 主な利用者  │ 初心者       │ データ科学者 │ OSS開発者    │
│ 行数        │ 少ない       │ やや多い     │ 多い         │
└─────────────┴──────────────┴──────────────┴──────────────┘


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  📝 Googleスタイル クイックリファレンス             ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

def 関数名(引数1, 引数2):
    \"\"\"
    関数の簡潔な説明（1行）
    
    Args:
        引数1 (型): 説明
        引数2 (型): 説明
    
    Returns:
        型: 説明
    
    Raises:
        例外名: 説明
    
    Examples:
        >>> 関数名(値1, 値2)
        結果
    \"\"\"


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  📊 NumPyスタイル クイックリファレンス              ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

def 関数名(引数1, 引数2):
    \"\"\"
    関数の簡潔な説明
    
    Parameters
    ----------
    引数1 : 型
        説明
    引数2 : 型
        説明
    
    Returns
    -------
    型
        説明
    
    Raises
    ------
    例外名
        説明
    
    Examples
    --------
    >>> 関数名(値1, 値2)
    結果
    \"\"\"


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  📖 reSTスタイル クイックリファレンス               ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

def 関数名(引数1, 引数2):
    \"\"\"
    関数の簡潔な説明
    
    :param 引数1: 説明
    :type 引数1: 型
    :param 引数2: 説明
    :type 引数2: 型
    :return: 説明
    :rtype: 型
    :raises 例外名: 説明
    \"\"\"


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  🎯 使い分けフローチャート                          ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

Q: どのスタイルを使うべき？

├─ 初心者？チーム開発？
│  └─ YES → Googleスタイル ★おすすめ
│
├─ データ分析・科学計算？
│  └─ YES → NumPyスタイル
│
├─ 公式ドキュメント作成？大規模OSS？
│  └─ YES → reSTスタイル
│
└─ 迷っている？
   └─ Googleスタイル！


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  ✅ Docstring書き方チェックリスト                   ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

【基本】
□ 三重引用符（\"\"\" または '''）で囲んでいる
□ 関数定義の直後に書いている
□ インデントが正しい

【内容】
□ 1行目に関数の目的を書いている
□ 全ての引数を説明している
□ 戻り値を説明している
□ 例外を説明している（発生する場合）
□ 型情報を記載している

【品質】
□ 誤字脱字がない
□ 文法が正しい
□ 簡潔で読みやすい
□ 正確である
□ 例が動作する


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  🛠️ 便利なツール                                    ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

【VS Code拡張機能】
- Python Docstring Generator
  → \"\"\" 入力で自動生成
- autoDocstring
  → カスタマイズ可能

【PyCharm】
- 組み込みのdocstring生成機能
  → ''' 入力で自動生成

【コマンドラインツール】
- pydocstyle
  → docstringのスタイルチェック
  $ pip install pydocstyle
  $ pydocstyle your_file.py

- interrogate
  → docstring網羅率チェック
  $ pip install interrogate
  $ interrogate your_file.py

【ドキュメント生成】
- Sphinx
  → 公式ドキュメント自動生成
  $ pip install sphinx

- pdoc
  → シンプルなドキュメント生成
  $ pip install pdoc


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  🎓 学習ステップ                                     ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

Week 1: 基本をマスター
□ 1行docstringを書く練習
□ 三重引用符に慣れる
□ help()で確認する習慣をつける

Week 2: Googleスタイルをマスター
□ Args, Returns, Raisesを使う
□ 実際のコードに書いてみる
□ Examplesも書いてみる

Week 3: 他のスタイルも試す
□ NumPyスタイルで書き直す
□ reSTスタイルで書き直す
□ 違いを理解する

Week 4: 実践と定着
□ 全ての関数にdocstringを書く
□ レビューしてもらう
□ ツールでチェックする


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  💡 よくある間違いと対策                             ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

【間違い1】引用符の数が違う
❌ def func():
      "これは1個"  # 1個だけだとただのコメント

✅ def func():
      \"\"\"これは3個\"\"\"  # 3個でdocstring

【間違い2】位置が違う
❌ \"\"\"これは間違い\"\"\"
   def func():
       pass

✅ def func():
      \"\"\"これは正しい\"\"\"
      pass

【間違い3】型情報がない
❌ def add(a, b):
      \"\"\"足し算する\"\"\"
      return a + b

✅ def add(a, b):
      \"\"\"
      足し算する
      
      Args:
          a (int): 1つ目の数
          b (int): 2つ目の数
      
      Returns:
          int: 合計
      \"\"\"
      return a + b

【間違い4】内部処理を書きすぎ
❌ def calc(x):
      \"\"\"
      xを受け取って、まずyに2を掛けて、
      それをzに代入して、最後にreturnする
      \"\"\"
      # 内部処理の詳細は書かない！

✅ def calc(x):
      \"\"\"
      xを2倍にして返す
      
      Args:
          x (int): 元の数
      
      Returns:
          int: xの2倍
      \"\"\"

【間違い5】例が間違っている
❌ def add(a, b):
      \"\"\"
      Examples:
          >>> add(1, 2)
          5  # 間違った結果！
      \"\"\"
      return a + b

✅ def add(a, b):
      \"\"\"
      Examples:
          >>> add(1, 2)
          3  # 正しい結果
      \"\"\"
      return a + b
""")

print("="*70)
print("🎉 Docstring完全ガイド 完了！")
print("="*70)
print("""
【今日学んだこと】
✅ Docstringの基本
✅ Googleスタイル（初心者向け）
✅ NumPyスタイル（科学技術系）
✅ reSTスタイル（Sphinx用）
✅ 3スタイルの比較
✅ 書き方のコツ
✅ 書き換えのコツ

【次のステップ】
1. 自分のコードにdocstringを書く
2. help()で確認する
3. pydocstyleでチェックする
4. レビューしてもらう

【重要ポイント】
💡 迷ったらGoogleスタイル！
💡 型ヒントと組み合わせる！
💡 全ての公開関数に書く！
💡 簡潔に、正確に、読みやすく！

まずは自分のコードに書いてみましょう！
""")</parameter>
</invoke>

copy







YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
生成AIパスポート試験合格に向けて学習中！
Python3エンジニア認定試験合格
2025年7月：BIの学習中です！

【技術】
Python/Django/スクレイピング/業務自動化







noteプレミアム
note pro
よくある質問・noteの使い方
プライバシー
クリエイターへのお問い合わせ
フィードバック
ご利用規約
通常ポイント利用特約
加盟店規約
資⾦決済法に基づく表⽰
特商法表記
投資情報の免責事項
🐰 ふわふわ大福店で学ぶDocstring記事備忘録①｜YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
