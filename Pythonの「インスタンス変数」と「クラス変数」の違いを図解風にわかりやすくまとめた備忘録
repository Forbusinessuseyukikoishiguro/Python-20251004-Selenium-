キーワードやクリエイターで検索


702
メニュー
 投稿

あなただけに表示されています
見出し画像を設定してみませんか?
見出し画像があると、もっと作品のイメージが伝わります！
かんたんにオリジナル画像を作ったり、他のクリエイターが提供した画像から選んだりすることもできます。
ぜひ活用してみましょう！


Pythonの「インスタンス変数」と「クラス変数」の違いを図解風にわかりやすくまとめた備忘録

YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
2025年10月4日 14:56

新人エンジニアさん向けに、Pythonの「インスタンス変数」と「クラス変数」の違いを図解風にわかりやすくまとめた備忘録




目次
🍄 インスタンス変数 vs クラス変数
🐾 例：Dogクラスで見てみよう
🐶 インスタンスを作成してみる
🔍 アクセスしてみる
🌊 イメージ図（言葉で描くと…）
⚠️ クラス変数の注意点
1. 全インスタンスで共有される
2. ミュータブルな型は特に注意
🌿 安全に使うには？
✅ 対策1：インスタンス変数にする

すべて表示
🍄 インスタンス変数 vs クラス変数


画像
項目インスタンス変数クラス変数 定義場所__init__ メソッド内で self.変数名クラスの外側（メソッドの外）で 変数名 所属各インスタンス（オブジェクト）に属するクラス全体に属する 値の共有インスタンスごとに異なる全インスタンスで共有される 変更の影響他のインスタンスには影響しない全インスタンスに影響する アクセス方法インスタンス名.変数名クラス名.変数名 または インスタンス名.変数名

🐾 例：Dogクラスで見てみよう
class Dog:
    species = "Canis familiaris"  # クラス変数
    dog_count = 0                 # クラス変数

    def __init__(self, name, age):
        self.name = name          # インスタンス変数
        self.age = age            # インスタンス変数
        Dog.dog_count += 1        # クラス変数の更新

    def speak(self, sound):
        return f"{self.name} says {sound}"

copy
🐶 インスタンスを作成してみる
buddy = Dog("Buddy", 9)
miles = Dog("Miles", 4)

copy
🔍 アクセスしてみる
print(buddy.name)       # Buddy（インスタンス変数）
print(Dog.species)      # Canis familiaris（クラス変数）
print(Dog.dog_count)    # 2（クラス変数）

copy
🌊 イメージ図（言葉で描くと…）
インスタンス変数は、各ワンちゃんが持ってる「名札」や「年齢」。

クラス変数は、犬全体が共有してる「犬種」や「犬の総数カウンター」。

クラス変数には便利な面もあるけれど、注意すべきポイントもあるんだ。特にミュータブル（変更可能）なオブジェクトを使うときは要注意！🍄

⚠️ クラス変数の注意点
1. 全インスタンスで共有される
クラス変数はクラス全体で共有されるから、1つのインスタンスで変更すると、他のインスタンスにも影響が出ることがあるよ。

class Sample:
    shared_list = []

    def add_item(self, item):
        self.shared_list.append(item)

a = Sample()
b = Sample()

a.add_item("apple")
print(b.shared_list)  # ['apple'] ← bにも影響してる！

copy
2. ミュータブルな型は特に注意
list や dict などのミュータブルな型をクラス変数に使うと、意図しない共有が起こることがあるよ。

list, dict, set → ミュータブル（変更可能）

int, str, tuple → イミュータブル（変更不可）

Qiitaでもミュータブルとイミュータブルの違いが詳しく解説されてるよ。

🌿 安全に使うには？
✅ 対策1：インスタンス変数にする
class SafeSample:
    def __init__(self):
        self.my_list = []

copy
✅ 対策2：クラス変数にミュータブルを使うならコピーする
import copy

class SaferSample:
    shared_list = []

    def __init__(self):
        self.my_list = copy.deepcopy(self.shared_list)

copy
🧠 まとめ
クラス変数は全インスタンスで共有される。

ミュータブルな型を使うと予期せぬ副作用が起こる。

安全に使うにはインスタンス変数に切り替えるか、コピーして使うのがベスト






YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
生成AIパスポート試験合格に向けて学習中！
Python3エンジニア認定試験合格
2025年7月：BIの学習中です！

【技術】
Python/Django/スクレイピング/業務自動化



noteプレミアム
note pro
よくある質問・noteの使い方
プライバシー
クリエイターへのお問い合わせ
フィードバック
ご利用規約
通常ポイント利用特約
加盟店規約
資⾦決済法に基づく表⽰
特商法表記
投資情報の免責事項
Pythonの「インスタンス変数」と「クラス変数」の違いを図解風にわかりやすくまとめた備忘録｜YUKIKO@BI＆AIを極めたい（転職活動中スカウト歓迎）
