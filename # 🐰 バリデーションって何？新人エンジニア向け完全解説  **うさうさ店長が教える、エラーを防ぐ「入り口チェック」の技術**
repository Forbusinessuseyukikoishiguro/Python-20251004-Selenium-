# 🐰 バリデーションって何？新人エンジニア向け完全解説

**うさうさ店長が教える、エラーを防ぐ「入り口チェック」の技術**

---

## 📚 目次

1. [バリデーションとは？](#1-バリデーションとは)
2. [なぜ必要なのか？](#2-なぜ必要なのか)
3. [基本的なバリデーション](#3-基本的なバリデーション)
4. [実践例：大福店で学ぶ](#4-実践例大福店で学ぶ)
5. [よくあるバリデーションパターン](#5-よくあるバリデーションパターン)
6. [エラーメッセージの書き方](#6-エラーメッセージの書き方)

---

## 1. バリデーションとは？

### 📖 簡単に言うと

**バリデーション（Validation）= 「入力値チェック」**

関数やメソッドに渡された値が**正しいかどうか確認**することです。

### 🏠 日常の例で理解しよう

```
レストランの入店チェック ≒ バリデーション

❌ NG例：
- 予約なしで満席の時
- 営業時間外
- 服装がドレスコードに合わない

✅ OK例：
- 予約あり
- 営業時間内
- ドレスコードOK

→ 条件を満たさない人は入店拒否（エラー）
```

---

## 2. なぜ必要なのか？

### ❌ バリデーションがない場合

```python
def sell_daifuku(quantity):
    """大福を販売する（バリデーションなし）"""
    price = 150
    total = quantity * price
    return total

# 😱 こんなことが起こる！
print(sell_daifuku(-5))      # -750円！？マイナスの売上
print(sell_daifuku(0))       # 0円（何も売ってない）
print(sell_daifuku("たくさん"))  # エラー！文字列は掛け算できない
print(sell_daifuku(None))    # エラー！Noneは計算できない
```

**問題点：**
- おかしな値でも計算されてしまう
- システムがクラッシュする
- データベースに変なデータが入る
- お金の計算が狂う（大問題！）

---

### ✅ バリデーションがある場合

```python
def sell_daifuku(quantity: int) -> int:
    """大福を販売する（バリデーションあり）"""
    
    # 🛡️ バリデーション（入り口チェック）
    # ここでおかしな値を弾く！
    
    if not isinstance(quantity, int):
        raise TypeError("個数は整数で指定してください")
    
    if quantity <= 0:
        raise ValueError("個数は1以上にしてください")
    
    if quantity > 100:
        raise ValueError("一度に購入できるのは100個までです")
    
    # ✅ ここまで来たら値は安全！
    price = 150
    total = quantity * price
    return total

# 🎉 安全に動作！
print(sell_daifuku(5))       # 750円（正常）

# 🛡️ エラーで止まる（正しい動き）
print(sell_daifuku(-5))      # ValueError: 個数は1以上に...
print(sell_daifuku(0))       # ValueError: 個数は1以上に...
print(sell_daifuku("たくさん"))  # TypeError: 個数は整数で...
```

**メリット：**
- 変な値が入らない
- エラーメッセージでわかりやすく教えてくれる
- システムが安全に動く
- バグを早期発見できる

---

## 3. 基本的なバリデーション

### 📋 バリデーションの種類

| 種類 | チェック内容 | 例 |
|------|------------|-----|
| **型チェック** | データ型が正しいか | 整数、文字列、リストなど |
| **範囲チェック** | 値が範囲内か | 1以上100以下 |
| **必須チェック** | 値が存在するか | Noneや空文字じゃないか |
| **形式チェック** | 形式が正しいか | メールアドレス、電話番号 |
| **存在チェック** | データが存在するか | 在庫があるか |

---

### 💻 基本パターン

```python
def example_validation(value):
    """バリデーションの基本パターン"""
    
    # ① 型チェック
    if not isinstance(value, int):
        raise TypeError("整数を指定してください")
    
    # ② Noneチェック（必須チェック）
    if value is None:
        raise ValueError("値は必須です")
    
    # ③ 範囲チェック（最小値）
    if value < 0:
        raise ValueError("0以上の値を指定してください")
    
    # ④ 範囲チェック（最大値）
    if value > 1000:
        raise ValueError("1000以下の値を指定してください")
    
    # ⑤ すべてクリア！
    return value
```

---

## 4. 実践例：大福店で学ぶ

### 🐰 ふわふわ大福店のバリデーション完全版

```python
from typing import Optional

class DaifukuShop:
    """大福店クラス（バリデーション完全版）"""
    
    def __init__(self, owner_name: str, stock: int) -> None:
        """
        大福店を初期化する
        
        Args:
            owner_name: 店長の名前
            stock: 初期在庫数
        """
        # 🛡️ バリデーション1: owner_nameのチェック
        
        # 型チェック
        if not isinstance(owner_name, str):
            raise TypeError("店長名は文字列で指定してください")
        
        # 空文字チェック
        if owner_name == "":
            raise ValueError("店長名は必須です")
        
        # 長さチェック
        if len(owner_name) > 50:
            raise ValueError("店長名は50文字以内にしてください")
        
        # 🛡️ バリデーション2: stockのチェック
        
        # 型チェック
        if not isinstance(stock, int):
            raise TypeError("在庫数は整数で指定してください")
        
        # 範囲チェック（負の数禁止）
        if stock < 0:
            raise ValueError("在庫数は0以上にしてください")
        
        # 範囲チェック（上限）
        MAX_STOCK = 10000
        if stock > MAX_STOCK:
            raise ValueError(f"在庫数は{MAX_STOCK}個以下にしてください")
        
        # ✅ すべてOK！初期化実行
        self.owner_name = owner_name
        self.stock = stock
        self.sold = 0
        self.revenue = 0
    
    def sell(
        self,
        quantity: int,
        price: int = 150,
        discount: float = 0
    ) -> Optional[int]:
        """
        大福を販売する
        
        Args:
            quantity: 販売個数
            price: 単価（円）
            discount: 割引率（0.0-1.0）
        
        Returns:
            売上金額。在庫不足の場合はNone
        """
        # 🛡️ バリデーション1: quantityのチェック
        
        # 型チェック
        if not isinstance(quantity, int):
            raise TypeError(f"個数は整数で指定してください（受け取った型: {type(quantity).__name__}）")
        
        # 範囲チェック（最小値）
        if quantity <= 0:
            raise ValueError("個数は1以上にしてください")
        
        # 範囲チェック（最大値）
        MAX_PURCHASE = 100  # 一度に購入できる上限
        if quantity > MAX_PURCHASE:
            raise ValueError(f"一度に購入できるのは{MAX_PURCHASE}個までです")
        
        # 🛡️ バリデーション2: priceのチェック
        
        if not isinstance(price, int):
            raise TypeError("単価は整数で指定してください")
        
        if price <= 0:
            raise ValueError("単価は1円以上にしてください")
        
        # 価格の妥当性チェック
        MIN_PRICE = 50
        MAX_PRICE = 1000
        if not (MIN_PRICE <= price <= MAX_PRICE):
            raise ValueError(f"単価は{MIN_PRICE}円から{MAX_PRICE}円の範囲で指定してください")
        
        # 🛡️ バリデーション3: discountのチェック
        
        if not isinstance(discount, (int, float)):
            raise TypeError("割引率は数値で指定してください")
        
        # 割引率の範囲チェック（0%～100%）
        if not (0 <= discount <= 1):
            raise ValueError("割引率は0.0から1.0の範囲で指定してください（例: 0.1 = 10%引き）")
        
        # 🛡️ バリデーション4: 在庫チェック
        
        # ビジネスルールのチェック
        if quantity > self.stock:
            # エラーではなくNoneを返す（在庫不足は異常ではない）
            return None
        
        # ✅ すべてOK！販売処理を実行
        total = int(quantity * price * (1 - discount))
        self.stock -= quantity
        self.sold += quantity
        self.revenue += total
        
        return total
    
    def restock(self, quantity: int) -> None:
        """
        在庫を補充する
        
        Args:
            quantity: 補充個数
        """
        # 🛡️ バリデーション
        
        if not isinstance(quantity, int):
            raise TypeError("補充個数は整数で指定してください")
        
        if quantity <= 0:
            raise ValueError("補充個数は1以上にしてください")
        
        # 補充後の在庫が上限を超えないかチェック
        MAX_STOCK = 10000
        if self.stock + quantity > MAX_STOCK:
            raise ValueError(
                f"補充後の在庫が上限({MAX_STOCK}個)を超えます。"
                f"現在の在庫: {self.stock}個"
            )
        
        # ✅ すべてOK！補充実行
        self.stock += quantity
```

---

### 🎯 使ってみよう

```python
# ✅ 正常なケース
shop = DaifukuShop("うさうさ", 100)
result = shop.sell(5)
print(f"売上: {result}円")  # 売上: 750円

# ❌ エラーになるケース

# ケース1: 店長名が空
shop = DaifukuShop("", 100)
# ValueError: 店長名は必須です

# ケース2: 在庫がマイナス
shop = DaifukuShop("うさうさ", -10)
# ValueError: 在庫数は0以上にしてください

# ケース3: 販売個数がマイナス
shop = DaifukuShop("うさうさ", 100)
shop.sell(-5)
# ValueError: 個数は1以上にしてください

# ケース4: 割引率が範囲外
shop.sell(5, discount=1.5)
# ValueError: 割引率は0.0から1.0の範囲で指定してください

# ケース5: 型が間違っている
shop.sell("たくさん")
# TypeError: 個数は整数で指定してください（受け取った型: str）
```

---

## 5. よくあるバリデーションパターン

### パターン1: 型チェック

```python
def type_validation_example(value):
    """型チェックの例"""
    
    # ① 単一の型チェック
    if not isinstance(value, int):
        raise TypeError("整数を指定してください")
    
    # ② 複数の型を許可
    if not isinstance(value, (int, float)):
        raise TypeError("数値を指定してください")
    
    # ③ リスト型チェック
    if not isinstance(value, list):
        raise TypeError("リストを指定してください")
    
    # ④ 辞書型チェック
    if not isinstance(value, dict):
        raise TypeError("辞書を指定してください")
```

---

### パターン2: 範囲チェック

```python
def range_validation_example(value: int):
    """範囲チェックの例"""
    
    # ① 最小値のみ
    if value < 0:
        raise ValueError("0以上の値を指定してください")
    
    # ② 最大値のみ
    if value > 100:
        raise ValueError("100以下の値を指定してください")
    
    # ③ 最小値と最大値
    MIN = 10
    MAX = 100
    if not (MIN <= value <= MAX):
        raise ValueError(f"{MIN}以上{MAX}以下の値を指定してください")
    
    # ④ 範囲外（等号なし）
    if value <= 0:
        raise ValueError("1以上の値を指定してください")
```

---

### パターン3: 必須チェック

```python
def required_validation_example(value):
    """必須チェックの例"""
    
    # ① Noneチェック
    if value is None:
        raise ValueError("値は必須です")
    
    # ② 空文字チェック
    if isinstance(value, str) and value == "":
        raise ValueError("空文字は許可されていません")
    
    # ③ 空文字・スペースのみチェック
    if isinstance(value, str) and value.strip() == "":
        raise ValueError("空白のみの文字列は許可されていません")
    
    # ④ 空リストチェック
    if isinstance(value, list) and len(value) == 0:
        raise ValueError("空のリストは許可されていません")
```

---

### パターン4: 文字列の形式チェック

```python
import re

def format_validation_example(email: str):
    """形式チェックの例"""
    
    # ① メールアドレスの形式チェック
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(email_pattern, email):
        raise ValueError("正しいメールアドレスを入力してください")
    
    # ② 電話番号の形式チェック（ハイフンなし10-11桁）
    phone_pattern = r'^0\d{9,10}$'
    if not re.match(phone_pattern, "09012345678"):
        raise ValueError("正しい電話番号を入力してください")
    
    # ③ 郵便番号の形式チェック（7桁）
    zipcode_pattern = r'^\d{7}$'
    if not re.match(zipcode_pattern, "1234567"):
        raise ValueError("郵便番号は7桁の数字で入力してください")
```

---

### パターン5: リスト・辞書の中身チェック

```python
def collection_validation_example(items: list):
    """コレクションのバリデーション例"""
    
    # ① リスト内の全要素が整数か
    if not all(isinstance(item, int) for item in items):
        raise TypeError("リスト内の要素はすべて整数である必要があります")
    
    # ② リスト内の全要素が正の数か
    if not all(item > 0 for item in items):
        raise ValueError("リスト内の要素はすべて正の数である必要があります")
    
    # ③ 重複チェック
    if len(items) != len(set(items)):
        raise ValueError("重複した値は許可されていません")

def dict_validation_example(data: dict):
    """辞書のバリデーション例"""
    
    # ① 必須キーの存在チェック
    required_keys = ['name', 'age', 'email']
    for key in required_keys:
        if key not in data:
            raise ValueError(f"必須項目 '{key}' がありません")
    
    # ② 各値の型チェック
    if not isinstance(data['name'], str):
        raise TypeError("nameは文字列である必要があります")
    
    if not isinstance(data['age'], int):
        raise TypeError("ageは整数である必要があります")
```

---

## 6. エラーメッセージの書き方

### 📝 良いエラーメッセージの条件

1. **何が問題か明確**
2. **どうすればいいか示す**
3. **現在の値を表示**
4. **優しい言葉で**

---

### ❌ 悪いエラーメッセージ

```python
def bad_error_messages(quantity: int):
    """悪いエラーメッセージの例"""
    
    if quantity <= 0:
        raise ValueError("エラー")  # ❌ 何がダメかわからない
    
    if quantity > 100:
        raise ValueError("ダメ")  # ❌ 理由が不明
    
    if not isinstance(quantity, int):
        raise TypeError("型エラー")  # ❌ どんな型が必要かわからない
```

---

### ✅ 良いエラーメッセージ

```python
def good_error_messages(quantity: int, max_stock: int = 100):
    """良いエラーメッセージの例"""
    
    # ① 問題と解決方法を明示
    if quantity <= 0:
        raise ValueError(
            f"個数は1以上を指定してください。"
            f"指定された値: {quantity}"
        )
    
    # ② 現在の状態を含める
    if quantity > max_stock:
        raise ValueError(
            f"一度に購入できるのは{max_stock}個までです。"
            f"指定された個数: {quantity}個"
        )
    
    # ③ 受け取った型と期待する型を表示
    if not isinstance(quantity, int):
        raise TypeError(
            f"個数は整数で指定してください。"
            f"受け取った型: {type(quantity).__name__}、"
            f"値: {quantity}"
        )
    
    # ④ 具体例を示す
    if not (0 <= quantity <= 1):
        raise ValueError(
            f"割引率は0.0から1.0の範囲で指定してください。"
            f"例: 0.1 = 10%引き、0.2 = 20%引き"
            f"指定された値: {quantity}"
        )
```

---

## 7. 実践チェックリスト

### ✅ バリデーションを書く時のチェック

```
【必須チェック】
□ 型は正しいか？（isinstance）
□ Noneではないか？
□ 範囲内か？（最小値・最大値）
□ 空文字・空リストではないか？

【推奨チェック】
□ ビジネスルールに合っているか？
□ データが存在するか？（在庫など）
□ 形式は正しいか？（メール、電話番号など）
□ 整合性はあるか？（開始日 < 終了日など）

【エラーメッセージ】
□ 何が問題か明確か？
□ どうすれば良いか示しているか？
□ 現在の値を表示しているか？
□ ユーザーに優しい言葉か？
```

---

## 8. まとめ

### 🎯 バリデーションの重要ポイント

```python
def perfect_validation_example(
    name: str,
    age: int,
    email: str
) -> dict:
    """完璧なバリデーションの例"""
    
    # 🛡️ ステップ1: 型チェック
    if not isinstance(name, str):
        raise TypeError("名前は文字列で指定してください")
    
    if not isinstance(age, int):
        raise TypeError("年齢は整数で指定してください")
    
    # 🛡️ ステップ2: 必須チェック
    if name.strip() == "":
        raise ValueError("名前は必須です")
    
    # 🛡️ ステップ3: 範囲チェック
    if not (0 <= age <= 150):
        raise ValueError(
            f"年齢は0歳から150歳の範囲で指定してください。"
            f"指定された年齢: {age}歳"
        )
    
    # 🛡️ ステップ4: 形式チェック
    import re
    if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
        raise ValueError(f"正しいメールアドレスを入力してください: {email}")
    
    # ✅ すべてOK！
    return {
        'name': name,
        'age': age,
        'email': email
    }
```

---

**🐰 うさうさ店長からのメッセージ:**

「バリデーションは**お店の入口で行う身分確認**みたいなものです！

変な人（変なデータ）が入ってこないように、
最初にしっかりチェックすることで、
お店の中（システム）は安全に保たれます。

**覚えるポイント:**
1. **関数の最初にバリデーション**を書く
2. **型・範囲・必須**の3つは必ずチェック
3. **わかりやすいエラーメッセージ**を書く
4. **早めにエラーを出す**（深い場所でエラーが出ると原因がわかりにくい）

最初は面倒に感じるかもしれませんが、
バグを防ぐ最強の防御壁です！

頑張ってください！🎉」
