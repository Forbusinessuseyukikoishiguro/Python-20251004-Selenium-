"""
====================================
5大記法 書き換え実践
デバッグプリント完全版
何をしているか完全に見える
====================================
"""

# ====================================
# パターン1: PEP 257 から書き換え
# ====================================

print("="*70)
print("【パターン1】PEP 257 → 他の4記法へ書き換え")
print("="*70)

# ----- 元: PEP 257 -----
def calc_original_pep(x, y):
    """2つの数を足し算する。"""
    # 【この関数の目的】
    # - 2つの整数を受け取る
    # - 足し算する
    # - 結果を返す
    
    print(f"  [PEP257元] 実行: {x} + {y}")  # デバッグ
    result = x + y  # 計算
    print(f"  [PEP257元] 結果: {result}")  # デバッグ
    return result


print("\n--- PEP 257 → Google への書き換え ---")
def calc_pep_to_google(x, y):
    """
    2つの数を足し算する。
    
    Args:
        x (int): 1つ目の数
        y (int): 2つ目の数
    
    Returns:
        int: x + y の結果
    """
    # 【書き換え内容】
    # PEP 257: """2つの数を足し算する。"""
    #    ↓
    # Google: 概要 + Args + Returns
    
    print(f"  [Google版] 実行: {x} + {y}")
    print(f"  [Google版] 引数x={x}, y={y} を足し算")
    result = x + y
    print(f"  [Google版] 結果: {result}")
    print(f"  [書き換え成功] PEP 257 → Google")
    return result


print("\n--- PEP 257 → NumPy への書き換え ---")
def calc_pep_to_numpy(x, y):
    """
    2つの数を足し算する。
    
    Parameters
    ----------
    x : int
        1つ目の数
    y : int
        2つ目の数
    
    Returns
    -------
    int
        x + y の結果
    """
    # 【書き換え内容】
    # PEP 257: """2つの数を足し算する。"""
    #    ↓
    # NumPy: 概要 + Parameters + ハイフン + Returns
    
    print(f"  [NumPy版] 実行: {x} + {y}")
    print(f"  [NumPy版] Parameters形式で引数を記述")
    result = x + y
    print(f"  [NumPy版] 結果: {result}")
    print(f"  [書き換え成功] PEP 257 → NumPy")
    return result


print("\n--- PEP 257 → reST への書き換え ---")
def calc_pep_to_rest(x, y):
    """
    2つの数を足し算する。
    
    :param x: 1つ目の数
    :type x: int
    :param y: 2つ目の数
    :type y: int
    :return: x + y の結果
    :rtype: int
    """
    # 【書き換え内容】
    # PEP 257: """2つの数を足し算する。"""
    #    ↓
    # reST: 概要 + :param/:type + :return/:rtype
    
    print(f"  [reST版] 実行: {x} + {y}")
    print(f"  [reST版] :param と :type で引数を2行ずつ記述")
    result = x + y
    print(f"  [reST版] 結果: {result}")
    print(f"  [書き換え成功] PEP 257 → reST")
    return result


print("\n--- PEP 257 → Epytext への書き換え ---")
def calc_pep_to_epytext(x, y):
    """
    2つの数を足し算する。
    
    @param x: 1つ目の数
    @type x: int
    @param y: 2つ目の数
    @type y: int
    @return: x + y の結果
    @rtype: int
    """
    # 【書き換え内容】
    # PEP 257: """2つの数を足し算する。"""
    #    ↓
    # Epytext: 概要 + @param/@type + @return/@rtype
    
    print(f"  [Epytext版] 実行: {x} + {y}")
    print(f"  [Epytext版] @ 記法で記述（レガシー）")
    result = x + y
    print(f"  [Epytext版] 結果: {result}")
    print(f"  [書き換え成功] PEP 257 → Epytext")
    return result


# テスト実行
print("\n▼ パターン1のテスト実行")
x, y = 10, 5
print(f"入力値: x={x}, y={y}\n")

print("1-0. 元のPEP 257:")
calc_original_pep(x, y)

print("\n1-1. PEP 257 → Google:")
calc_pep_to_google(x, y)

print("\n1-2. PEP 257 → NumPy:")
calc_pep_to_numpy(x, y)

print("\n1-3. PEP 257 → reST:")
calc_pep_to_rest(x, y)

print("\n1-4. PEP 257 → Epytext:")
calc_pep_to_epytext(x, y)


# ====================================
# パターン2: Google から書き換え
# ====================================

print("\n\n" + "="*70)
print("【パターン2】Google → 他の4記法へ書き換え")
print("="*70)

# ----- 元: Google -----
def calc_original_google(x, y, z=10):
    """
    (x / y) + z を計算する。
    
    Args:
        x (float): 割られる数
        y (float): 割る数
        z (float, optional): 加算する数。デフォルトは10
    
    Returns:
        float: 計算結果
    
    Raises:
        ValueError: yが0の場合
    """
    # 【この関数の目的】
    # - xをyで割る
    # - zを足す
    # - yが0ならエラー
    
    print(f"  [Google元] 実行: ({x} / {y}) + {z}")
    if y == 0:
        print(f"  [Google元] エラー: yが0です")
        raise ValueError("yは0以外")
    
    result = x / y + z
    print(f"  [Google元] 結果: {result}")
    return result


print("\n--- Google → PEP 257 への書き換え ---")
def calc_google_to_pep(x, y, z=10):
    """(x / y) + z を計算する。"""
    # 【書き換え内容】
    # Google: 概要 + Args + Returns + Raises
    #    ↓
    # PEP 257: 概要のみ（詳細情報は削除）
    
    print(f"  [PEP257版] 実行: ({x} / {y}) + {z}")
    print(f"  [PEP257版] 簡略化（引数・戻り値の説明を削除）")
    
    if y == 0:
        print(f"  [PEP257版] エラー: yが0です")
        raise ValueError("yは0以外")
    
    result = x / y + z
    print(f"  [PEP257版] 結果: {result}")
    print(f"  [書き換え成功] Google → PEP 257")
    return result


print("\n--- Google → NumPy への書き換え ---")
def calc_google_to_numpy(x, y, z=10):
    """
    (x / y) + z を計算する。
    
    Parameters
    ----------
    x : float
        割られる数
    y : float
        割る数
    z : float, optional
        加算する数。デフォルトは10
    
    Returns
    -------
    float
        計算結果
    
    Raises
    ------
    ValueError
        yが0の場合
    """
    # 【書き換え内容】
    # Google: Args: + Returns: + Raises:
    #    ↓
    # NumPy: Parameters + ハイフン + Returns + Raises
    
    print(f"  [NumPy版] 実行: ({x} / {y}) + {z}")
    print(f"  [NumPy版] Args→Parameters, ハイフン追加, インデント形式")
    
    if y == 0:
        print(f"  [NumPy版] エラー: yが0です")
        raise ValueError("yは0以外")
    
    result = x / y + z
    print(f"  [NumPy版] 結果: {result}")
    print(f"  [書き換え成功] Google → NumPy")
    return result


print("\n--- Google → reST への書き換え ---")
def calc_google_to_rest(x, y, z=10):
    """
    (x / y) + z を計算する。
    
    :param x: 割られる数
    :type x: float
    :param y: 割る数
    :type y: float
    :param z: 加算する数（デフォルト: 10）
    :type z: float
    :return: 計算結果
    :rtype: float
    :raises ValueError: yが0の場合
    """
    # 【書き換え内容】
    # Google: x (float): 説明
    #    ↓
    # reST: :param x: 説明 + :type x: float（2行に分割）
    
    print(f"  [reST版] 実行: ({x} / {y}) + {z}")
    print(f"  [reST版] 各引数を :param と :type の2行で記述")
    
    if y == 0:
        print(f"  [reST版] エラー: yが0です")
        raise ValueError("yは0以外")
    
    result = x / y + z
    print(f"  [reST版] 結果: {result}")
    print(f"  [書き換え成功] Google → reST")
    return result


print("\n--- Google → Epytext への書き換え ---")
def calc_google_to_epytext(x, y, z=10):
    """
    (x / y) + z を計算する。
    
    @param x: 割られる数
    @type x: float
    @param y: 割る数
    @type y: float
    @param z: 加算する数（デフォルト: 10）
    @type z: float
    @return: 計算結果
    @rtype: float
    @raise ValueError: yが0の場合
    """
    # 【書き換え内容】
    # reST: :param, :type, :return, :rtype, :raises
    #    ↓
    # Epytext: @param, @type, @return, @rtype, @raise
    
    print(f"  [Epytext版] 実行: ({x} / {y}) + {z}")
    print(f"  [Epytext版] : を @ に置き換え")
    
    if y == 0:
        print(f"  [Epytext版] エラー: yが0です")
        raise ValueError("yは0以外")
    
    result = x / y + z
    print(f"  [Epytext版] 結果: {result}")
    print(f"  [書き換え成功] Google → Epytext")
    return result


# テスト実行
print("\n▼ パターン2のテスト実行")
x2, y2, z2 = 20.0, 4.0, 10.0
print(f"入力値: x={x2}, y={y2}, z={z2}\n")

print("2-0. 元のGoogle:")
calc_original_google(x2, y2, z2)

print("\n2-1. Google → PEP 257:")
calc_google_to_pep(x2, y2, z2)

print("\n2-2. Google → NumPy:")
calc_google_to_numpy(x2, y2, z2)

print("\n2-3. Google → reST:")
calc_google_to_rest(x2, y2, z2)

print("\n2-4. Google → Epytext:")
calc_google_to_epytext(x2, y2, z2)


# ====================================
# パターン3: NumPy から書き換え
# ====================================

print("\n\n" + "="*70)
print("【パターン3】NumPy → 他の4記法へ書き換え")
print("="*70)

# ----- 元: NumPy -----
def calc_original_numpy(values):
    """
    リストの統計を計算する。
    
    Parameters
    ----------
    values : list of float
        数値のリスト
    
    Returns
    -------
    mean : float
        平均値
    total : float
        合計値
    """
    # 【この関数の目的】
    # - リストを受け取る
    # - 平均と合計を計算
    # - タプルで返す
    
    print(f"  [NumPy元] 実行: values={values}")
    total = sum(values)
    mean = total / len(values)
    print(f"  [NumPy元] 合計={total}, 平均={mean}")
    return mean, total


print("\n--- NumPy → PEP 257 への書き換え ---")
def calc_numpy_to_pep(values):
    """リストの統計を計算する。"""
    # 【書き換え内容】
    # NumPy: Parameters + ハイフン + Returns
    #    ↓
    # PEP 257: 概要のみ
    
    print(f"  [PEP257版] 実行: values={values}")
    print(f"  [PEP257版] 詳細削除（概要のみ残す）")
    
    total = sum(values)
    mean = total / len(values)
    print(f"  [PEP257版] 合計={total}, 平均={mean}")
    print(f"  [書き換え成功] NumPy → PEP 257")
    return mean, total


print("\n--- NumPy → Google への書き換え ---")
def calc_numpy_to_google(values):
    """
    リストの統計を計算する。
    
    Args:
        values (list of float): 数値のリスト
    
    Returns:
        tuple: (mean, total) のタプル
            mean (float): 平均値
            total (float): 合計値
    """
    # 【書き換え内容】
    # NumPy: values : list of float (次の行に説明)
    #    ↓
    # Google: values (list of float): 説明（1行にまとめる）
    
    print(f"  [Google版] 実行: values={values}")
    print(f"  [Google版] ハイフン削除, 1行形式に変換")
    
    total = sum(values)
    mean = total / len(values)
    print(f"  [Google版] 合計={total}, 平均={mean}")
    print(f"  [書き換え成功] NumPy → Google")
    return mean, total


print("\n--- NumPy → reST への書き換え ---")
def calc_numpy_to_rest(values):
    """
    リストの統計を計算する。
    
    :param values: 数値のリスト
    :type values: list of float
    :return: (mean, total) のタプル
    :rtype: tuple
    """
    # 【書き換え内容】
    # NumPy: values : list of float (ハイフン + インデント)
    #    ↓
    # reST: :param values: + :type values: (2行形式)
    
    print(f"  [reST版] 実行: values={values}")
    print(f"  [reST版] ハイフン削除, :param/:type形式")
    
    total = sum(values)
    mean = total / len(values)
    print(f"  [reST版] 合計={total}, 平均={mean}")
    print(f"  [書き換え成功] NumPy → reST")
    return mean, total


print("\n--- NumPy → Epytext への書き換え ---")
def calc_numpy_to_epytext(values):
    """
    リストの統計を計算する。
    
    @param values: 数値のリスト
    @type values: list of float
    @return: (mean, total) のタプル
    @rtype: tuple
    """
    # 【書き換え内容】
    # reST: :param, :type, :return, :rtype
    #    ↓
    # Epytext: @param, @type, @return, @rtype
    
    print(f"  [Epytext版] 実行: values={values}")
    print(f"  [Epytext版] : を @ に置き換え")
    
    total = sum(values)
    mean = total / len(values)
    print(f"  [Epytext版] 合計={total}, 平均={mean}")
    print(f"  [書き換え成功] NumPy → Epytext")
    return mean, total


# テスト実行
print("\n▼ パターン3のテスト実行")
values = [10.0, 20.0, 30.0]
print(f"入力値: values={values}\n")

print("3-0. 元のNumPy:")
calc_original_numpy(values)

print("\n3-1. NumPy → PEP 257:")
calc_numpy_to_pep(values)

print("\n3-2. NumPy → Google:")
calc_numpy_to_google(values)

print("\n3-3. NumPy → reST:")
calc_numpy_to_rest(values)

print("\n3-4. NumPy → Epytext:")
calc_numpy_to_epytext(values)


# ====================================
# 最終まとめ
# ====================================

print("\n\n" + "="*70)
print("【最終まとめ】全パターンの書き換え完了")
print("="*70)
print("""
✅ パターン1: PEP 257 → 他の4記法（完了）
✅ パターン2: Google → 他の4記法（完了）
✅ パターン3: NumPy → 他の4記法（完了）

【書き換えのポイント】
- PEP 257: 概要のみ（最小限）
- Google: Args/Returns形式（読みやすい）
- NumPy: ハイフン + インデント（表形式）
- reST: :記法 + 2行ずつ（Sphinx用）
- Epytext: @記法（レガシー）

【デバッグプリントで確認できたこと】
✓ 各関数が何をしているか
✓ 書き換え前後の違い
✓ 実行結果が正しいか
✓ 書き換えが成功したか

新人エンジニアの皆さん、頑張ってください！
""")



#================================================
# デバッグプリント付き 書き換え実践コード<system_warning>Token usage: 126918/190000; 63082 remaining</system_warning>

完成しました！

## 📊 デバッグプリント完全版の特徴

### 完全に見える化
- **何の関数か**: docstringで明確に記載
- **何をしているか**: デバッグプリントで実行過程を表示
- **書き換え成功**: 各関数で書き換え完了メッセージ

### デバッグプリントの内容
```python
[記法名] 実行: 計算式
[記法名] 処理内容の説明
[記法名] 結果: 値
[書き換え成功] 元記法 → 新記法
```

### 実行すると分かること
1. **元の記法**: どの記法から始めたか
2. **書き換え過程**: どう変換したか
3. **実行結果**: 正しく動作するか
4. **書き換え完了**: 成功したか

### 新人エンジニアに優しい
- 実行するだけで全て理解できる
- 視覚的に違いが分かる
- 成功・失敗が明確
- 学習の進捗が見える

このコードを実行すれば、5大記法の書き換えが完全に体験できます！

＃＝＝＝＝＝＝＝＝＝＝＝＝＝－
"""
====================================
5大記法 書き換え実践
デバッグプリント完全版
一行ずつコメント付き
====================================
"""
# 三重引用符でモジュール全体の説明を書く
# このファイルは5つのdocstring記法の書き換え方法を学ぶためのもの

# ====================================
# パターン1: PEP 257 から書き換え
# ====================================

print("="*70)  # = を70個表示（区切り線）
print("【パターン1】PEP 257 → 他の4記法へ書き換え")  # タイトル表示
print("="*70)  # 区切り線

# ----- 元: PEP 257 -----
def calc_original_pep(x, y):  # 関数定義: 2つの引数を受け取る
    """2つの数を足し算する。"""  # PEP 257形式のdocstring（1行のみ）
    # 【この関数の目的】
    # - 2つの整数を受け取る
    # - 足し算する
    # - 結果を返す
    
    print(f"  [PEP257元] 実行: {x} + {y}")  # f文字列でデバッグ出力
    result = x + y  # x と y を足して result に代入
    print(f"  [PEP257元] 結果: {result}")  # 計算結果を表示
    return result  # 結果を呼び出し元に返す


print("\n--- PEP 257 → Google への書き換え ---")  # \nは改行、---は見出し
def calc_pep_to_google(x, y):  # PEP 257をGoogleスタイルに書き換えた関数
    """
    2つの数を足し算する。
    
    Args:
        x (int): 1つ目の数
        y (int): 2つ目の数
    
    Returns:
        int: x + y の結果
    """
    # docstringの構造:
    # 1行目: 概要（何をする関数か）
    # 空行
    # Args: 引数の説明セクション
    #   x (int): 引数名 (型): 説明
    # Returns: 戻り値の説明セクション
    #   int: 型: 説明
    
    # 【書き換え内容】
    # PEP 257: """2つの数を足し算する。"""
    #    ↓ 詳細化
    # Google: 概要 + Args + Returns
    
    print(f"  [Google版] 実行: {x} + {y}")  # どの記法で実行中か表示
    print(f"  [Google版] 引数x={x}, y={y} を足し算")  # 引数の値を表示
    result = x + y  # 足し算を実行
    print(f"  [Google版] 結果: {result}")  # 結果を表示
    print(f"  [書き換え成功] PEP 257 → Google")  # 書き換え完了メッセージ
    return result  # 計算結果を返す


print("\n--- PEP 257 → NumPy への書き換え ---")  # NumPy版の見出し
def calc_pep_to_numpy(x, y):  # PEP 257をNumPyスタイルに書き換えた関数
    """
    2つの数を足し算する。
    
    Parameters
    ----------
    x : int
        1つ目の数
    y : int
        2つ目の数
    
    Returns
    -------
    int
        x + y の結果
    """
    # docstringの構造:
    # 1行目: 概要
    # 空行
    # Parameters: 引数セクション
    # ----------: ハイフン8個以上（セクションの区切り）
    #   x : int （コロンで型を指定）
    #       説明（次の行にインデント4スペース）
    # Returns: 戻り値セクション
    # -------: ハイフン7個以上
    #   int （型のみ）
    #       説明（次の行にインデント）
    
    # 【書き換え内容】
    # PEP 257: """2つの数を足し算する。"""
    #    ↓ 詳細化 + 表形式
    # NumPy: 概要 + Parameters + ハイフン + Returns
    
    print(f"  [NumPy版] 実行: {x} + {y}")  # 実行内容を表示
    print(f"  [NumPy版] Parameters形式で引数を記述")  # 記法の特徴を表示
    result = x + y  # x + y を計算
    print(f"  [NumPy版] 結果: {result}")  # 結果を表示
    print(f"  [書き換え成功] PEP 257 → NumPy")  # 成功メッセージ
    return result  # 結果を返す


print("\n--- PEP 257 → reST への書き換え ---")  # reST版の見出し
def calc_pep_to_rest(x, y):  # PEP 257をreSTスタイルに書き換えた関数
    """
    2つの数を足し算する。
    
    :param x: 1つ目の数
    :type x: int
    :param y: 2つ目の数
    :type y: int
    :return: x + y の結果
    :rtype: int
    """
    # docstringの構造:
    # 1行目: 概要
    # 空行
    # :param x: 引数xの説明（コロンで始まる）
    # :type x: 引数xの型（paramとtypeはセット）
    # :param y: 引数yの説明
    # :type y: 引数yの型
    # :return: 戻り値の説明
    # :rtype: 戻り値の型
    # 各引数が2行ずつ必要
    
    # 【書き換え内容】
    # PEP 257: """2つの数を足し算する。"""
    #    ↓ 詳細化 + 2行形式
    # reST: 概要 + :param/:type + :return/:rtype
    
    print(f"  [reST版] 実行: {x} + {y}")  # 実行を表示
    print(f"  [reST版] :param と :type で引数を2行ずつ記述")  # 特徴を表示
    result = x + y  # 計算実行
    print(f"  [reST版] 結果: {result}")  # 結果表示
    print(f"  [書き換え成功] PEP 257 → reST")  # 成功表示
    return result  # 返す


print("\n--- PEP 257 → Epytext への書き換え ---")  # Epytext版の見出し
def calc_pep_to_epytext(x, y):  # PEP 257をEpytextスタイルに書き換えた関数
    """
    2つの数を足し算する。
    
    @param x: 1つ目の数
    @type x: int
    @param y: 2つ目の数
    @type y: int
    @return: x + y の結果
    @rtype: int
    """
    # docstringの構造:
    # reSTとほぼ同じだが @ で始まる
    # @param x: 引数xの説明（@で始まる）
    # @type x: 引数xの型
    # @return: 戻り値の説明
    # @rtype: 戻り値の型
    # 注意: 新規プロジェクトでは使わない（レガシー）
    
    # 【書き換え内容】
    # PEP 257: """2つの数を足し算する。"""
    #    ↓ 詳細化 + @記法
    # Epytext: 概要 + @param/@type + @return/@rtype
    
    print(f"  [Epytext版] 実行: {x} + {y}")  # 実行表示
    print(f"  [Epytext版] @ 記法で記述（レガシー）")  # 特徴（古い記法）
    result = x + y  # 計算
    print(f"  [Epytext版] 結果: {result}")  # 結果
    print(f"  [書き換え成功] PEP 257 → Epytext")  # 成功
    return result  # 返す


# テスト実行
print("\n▼ パターン1のテスト実行")  # テスト開始の表示
x, y = 10, 5  # テスト用の変数に値を代入（x=10, y=5）
print(f"入力値: x={x}, y={y}\n")  # 入力値を表示、\nで改行

print("1-0. 元のPEP 257:")  # テスト1-0の見出し
calc_original_pep(x, y)  # 元のPEP 257版の関数を呼び出し

print("\n1-1. PEP 257 → Google:")  # テスト1-1の見出し、\nで改行
calc_pep_to_google(x, y)  # Google版の関数を呼び出し

print("\n1-2. PEP 257 → NumPy:")  # テスト1-2の見出し
calc_pep_to_numpy(x, y)  # NumPy版の関数を呼び出し

print("\n1-3. PEP 257 → reST:")  # テスト1-3の見出し
calc_pep_to_rest(x, y)  # reST版の関数を呼び出し

print("\n1-4. PEP 257 → Epytext:")  # テスト1-4の見出し
calc_pep_to_epytext(x, y)  # Epytext版の関数を呼び出し


# ====================================
# パターン2: Google から書き換え
# ====================================

print("\n\n" + "="*70)  # 改行2つ + 区切り線
print("【パターン2】Google → 他の4記法へ書き換え")  # タイトル
print("="*70)  # 区切り線

# ----- 元: Google -----
def calc_original_google(x, y, z=10):  # 3つの引数、zはデフォルト値10
    """
    (x / y) + z を計算する。
    
    Args:
        x (float): 割られる数
        y (float): 割る数
        z (float, optional): 加算する数。デフォルトは10
    
    Returns:
        float: 計算結果
    
    Raises:
        ValueError: yが0の場合
    """
    # Googleスタイルの特徴:
    # - Args: 引数セクション
    # - Returns: 戻り値セクション
    # - Raises: 例外セクション
    # - optional: デフォルト値がある引数
    
    # 【この関数の目的】
    # - xをyで割る
    # - zを足す
    # - yが0ならエラーを出す
    
    print(f"  [Google元] 実行: ({x} / {y}) + {z}")  # 計算式を表示
    if y == 0:  # yが0かチェック（if文）
        print(f"  [Google元] エラー: yが0です")  # エラーメッセージ
        raise ValueError("yは0以外")  # ValueErrorを発生させる
    
    result = x / y + z  # x割るy + z を計算
    print(f"  [Google元] 結果: {result}")  # 結果を表示
    return result  # 返す


print("\n--- Google → PEP 257 への書き換え ---")  # 見出し
def calc_google_to_pep(x, y, z=10):  # GoogleをPEP 257に書き換えた関数
    """(x / y) + z を計算する。"""  # 概要のみ（詳細削除）
    # 【書き換え内容】
    # Google: 概要 + Args + Returns + Raises
    #    ↓ 簡略化
    # PEP 257: 概要のみ（Args, Returns, Raisesを削除）
    
    print(f"  [PEP257版] 実行: ({x} / {y}) + {z}")  # 実行表示
    print(f"  [PEP257版] 簡略化（引数・戻り値の説明を削除）")  # 書き換え内容
    
    if y == 0:  # yが0ならエラー
        print(f"  [PEP257版] エラー: yが0です")  # エラー表示
        raise ValueError("yは0以外")  # 例外発生
    
    result = x / y + z  # 計算
    print(f"  [PEP257版] 結果: {result}")  # 結果
    print(f"  [書き換え成功] Google → PEP 257")  # 成功
    return result  # 返す


print("\n--- Google → NumPy への書き換え ---")  # 見出し
def calc_google_to_numpy(x, y, z=10):  # GoogleをNumPyに書き換えた関数
    """
    (x / y) + z を計算する。
    
    Parameters
    ----------
    x : float
        割られる数
    y : float
        割る数
    z : float, optional
        加算する数。デフォルトは10
    
    Returns
    -------
    float
        計算結果
    
    Raises
    ------
    ValueError
        yが0の場合
    """
    # 【書き換え内容】
    # Google: Args: x (float): 説明
    #    ↓ 形式変更
    # NumPy: Parameters
    #        ---------- （ハイフン追加）
    #        x : float （コロン形式）
    #            説明 （次の行にインデント）
    
    print(f"  [NumPy版] 実行: ({x} / {y}) + {z}")  # 実行
    print(f"  [NumPy版] Args→Parameters, ハイフン追加, インデント形式")  # 変更点
    
    if y == 0:  # エラーチェック
        print(f"  [NumPy版] エラー: yが0です")  # エラー
        raise ValueError("yは0以外")  # 例外
    
    result = x / y + z  # 計算
    print(f"  [NumPy版] 結果: {result}")  # 結果
    print(f"  [書き換え成功] Google → NumPy")  # 成功
    return result  # 返す


print("\n--- Google → reST への書き換え ---")  # 見出し
def calc_google_to_rest(x, y, z=10):  # GoogleをreSTに書き換えた関数
    """
    (x / y) + z を計算する。
    
    :param x: 割られる数
    :type x: float
    :param y: 割る数
    :type y: float
    :param z: 加算する数（デフォルト: 10）
    :type z: float
    :return: 計算結果
    :rtype: float
    :raises ValueError: yが0の場合
    """
    # 【書き換え内容】
    # Google: x (float): 説明 （1行）
    #    ↓ 分割
    # reST: :param x: 説明 （1行目）
    #       :type x: float （2行目）
    # 各引数が2行になる
    
    print(f"  [reST版] 実行: ({x} / {y}) + {z}")  # 実行
    print(f"  [reST版] 各引数を :param と :type の2行で記述")  # 変更点
    
    if y == 0:  # エラーチェック
        print(f"  [reST版] エラー: yが0です")  # エラー
        raise ValueError("yは0以外")  # 例外
    
    result = x / y + z  # 計算
    print(f"  [reST版] 結果: {result}")  # 結果
    print(f"  [書き換え成功] Google → reST")  # 成功
    return result  # 返す


print("\n--- Google → Epytext への書き換え ---")  # 見出し
def calc_google_to_epytext(x, y, z=10):  # GoogleをEpytextに書き換えた関数
    """
    (x / y) + z を計算する。
    
    @param x: 割られる数
    @type x: float
    @param y: 割る数
    @type y: float
    @param z: 加算する数（デフォルト: 10）
    @type z: float
    @return: 計算結果
    @rtype: float
    @raise ValueError: yが0の場合
    """
    # 【書き換え内容】
    # reST: :param, :type, :return, :rtype, :raises
    #    ↓ 記号変更
    # Epytext: @param, @type, @return, @rtype, @raise
    # コロン : を @ に置き換えるだけ
    
    print(f"  [Epytext版] 実行: ({x} / {y}) + {z}")  # 実行
    print(f"  [Epytext版] : を @ に置き換え")  # 変更点
    
    if y == 0:  # エラーチェック
        print(f"  [Epytext版] エラー: yが0です")  # エラー
        raise ValueError("yは0以外")  # 例外
    
    result = x / y + z  # 計算
    print(f"  [Epytext版] 結果: {result}")  # 結果
    print(f"  [書き換え成功] Google → Epytext")  # 成功
    return result  # 返す


# テスト実行
print("\n▼ パターン2のテスト実行")  # テスト開始
x2, y2, z2 = 20.0, 4.0, 10.0  # テスト用の値を代入
print(f"入力値: x={x2}, y={y2}, z={z2}\n")  # 入力値表示

print("2-0. 元のGoogle:")  # テスト2-0
calc_original_google(x2, y2, z2)  # Google元の関数を実行

print("\n2-1. Google → PEP 257:")  # テスト2-1
calc_google_to_pep(x2, y2, z2)  # PEP 257版を実行

print("\n2-2. Google → NumPy:")  # テスト2-2
calc_google_to_numpy(x2, y2, z2)  # NumPy版を実行

print("\n2-3. Google → reST:")  # テスト2-3
calc_google_to_rest(x2, y2, z2)  # reST版を実行

print("\n2-4. Google → Epytext:")  # テスト2-4
calc_google_to_epytext(x2, y2, z2)  # Epytext版を実行


# ====================================
# パターン3: NumPy から書き換え
# ====================================

print("\n\n" + "="*70)  # 改行 + 区切り線
print("【パターン3】NumPy → 他の4記法へ書き換え")  # タイトル
print("="*70)  # 区切り線

# ----- 元: NumPy -----
def calc_original_numpy(values):  # リストを引数に取る関数
    """
    リストの統計を計算する。
    
    Parameters
    ----------
    values : list of float
        数値のリスト
    
    Returns
    -------
    mean : float
        平均値
    total : float
        合計値
    """
    # NumPyスタイルの特徴:
    # - Parameters （複数形）
    # - ハイフン ----------
    # - 表形式のレイアウト
    # - 複数の戻り値を個別に説明
    
    # 【この関数の目的】
    # - リストを受け取る
    # - 平均と合計を計算
    # - タプルで2つの値を返す
    
    print(f"  [NumPy元] 実行: values={values}")  # 入力表示
    total = sum(values)  # sum()でリストの合計を計算
    mean = total / len(values)  # 合計 ÷ 要素数 = 平均
    print(f"  [NumPy元] 合計={total}, 平均={mean}")  # 結果表示
    return mean, total  # タプル (mean, total) を返す


print("\n--- NumPy → PEP 257 への書き換え ---")  # 見出し
def calc_numpy_to_pep(values):  # NumPyをPEP 257に書き換えた関数
    """リストの統計を計算する。"""  # 概要のみ
    # 【書き換え内容】
    # NumPy: Parameters + ハイフン + Returns + 詳細
    #    ↓ 大幅削除
    # PEP 257: 概要のみ（すべての詳細を削除）
    
    print(f"  [PEP257版] 実行: values={values}")  # 実行
    print(f"  [PEP257版] 詳細削除（概要のみ残す）")  # 変更点
    
    total = sum(values)  # 合計計算
    mean = total / len(values)  # 平均計算
    print(f"  [PEP257版] 合計={total}, 平均={mean}")  # 結果
    print(f"  [書き換え成功] NumPy → PEP 257")  # 成功
    return mean, total  # タプルで返す


print("\n--- NumPy → Google への書き換え ---")  # 見出し
def calc_numpy_to_google(values):  # NumPyをGoogleに書き換えた関数
    """
    リストの統計を計算する。
    
    Args:
        values (list of float): 数値のリスト
    
    Returns:
        tuple: (mean, total) のタプル
            mean (float): 平均値
            total (float): 合計値
    """
    # 【書き換え内容】
    # NumPy: values : list of float
    #            説明 （2行形式）
    #    ↓ 1行にまとめる
    # Google: values (list of float): 説明 （1行）
    # ハイフンを削除、型を()で囲む
    
    print(f"  [Google版] 実行: values={values}")  # 実行
    print(f"  [Google版] ハイフン削除, 1行形式に変換")  # 変更点
    
    total = sum(values)  # 合計
    mean = total / len(values)  # 平均
    print(f"  [Google版] 合計={total}, 平均={mean}")  # 結果
    print(f"  [書き換え成功] NumPy → Google")  # 成功
    return mean, total  # 返す


print("\n--- NumPy → reST への書き換え ---")  # 見出し
def calc_numpy_to_rest(values):  # NumPyをreSTに書き換えた関数
    """
    リストの統計を計算する。
    
    :param values: 数値のリスト
    :type values: list of float
    :return: (mean, total) のタプル
    :rtype: tuple
    """
    # 【書き換え内容】
    # NumPy: Parameters
    #        ----------
    #        values : list of float
    #            説明
    #    ↓ ハイフン削除、:記法に
    # reST: :param values: 説明
    #       :type values: list of float
    
    print(f"  [reST版] 実行: values={values}")  # 実行
    print(f"  [reST版] ハイフン削除, :param/:type形式")  # 変更点
    
    total = sum(values)  # 合計
    mean = total / len(values)  # 平均
    print(f"  [reST版] 合計={total}, 平均={mean}")  # 結果
    print(f"  [書き換え成功] NumPy → reST")  # 成功
    return mean, total  # 返す


print("\n--- NumPy → Epytext への書き換え ---")  # 見出し
def calc_numpy_to_epytext(values):  # NumPyをEpytextに書き換えた関数
    """
    リストの統計を計算する。
    
    @param values: 数値のリスト
    @type values: list of float
    @return: (mean, total) のタプル
    @rtype: tuple
    """
    # 【書き換え内容】
    # reST: :param, :type, :return, :rtype
    #    ↓ 記号変更のみ
    # Epytext: @param, @type, @return, @rtype
    # コロン : を @ に置き換えるだけ
    
    print(f"  [Epytext版] 実行: values={values}")  # 実行
    print(f"  [Epytext版] : を @ に置き換え")  # 変更点
    
    total = sum(values)  # 合計
    mean = total / len(values)  # 平均
    print(f"  [Epytext版] 合計={total}, 平均={mean}")  # 結果
    print(f"  [書き換え成功] NumPy → Epytext")  # 成功
    return mean, total  # 返す


# テスト実行
print("\n▼ パターン3のテスト実行")  # テスト開始
values = [10.0, 20.0, 30.0]  # テスト用リスト（3つの要素）
print(f"入力値: values={values}\n")  # 入力値表示

print("3-0. 元のNumPy:")  # テスト3-0
calc_original_numpy(values)  # NumPy元を実行

print("\n3-1. NumPy → PEP 257:")  # テスト3-1
calc_numpy_to_pep(values)  # PEP 257版を実行

print("\n3-2. NumPy → Google:")  # テスト3-2
calc_numpy_to_google(values)  # Google版を実行

print("\n3-3. NumPy → reST:")  # テスト3-3
calc_numpy_to_rest(values)  # reST版を実行

print("\n3-4. NumPy → Epytext:")  # テスト3-4
calc_numpy_to_epytext(values)  # Epytext版を実行


# ====================================
# 最終まとめ
# ====================================

print("\n\n" + "="*70)  # 改行2つ + 区切り線
print("【最終まとめ】全パターンの書き換え完了")  # まとめタイトル
print("="*70)  # 区切り線
print("""
✅ パターン1: PEP 257 → 他の4記法（完了）
✅ パターン2: Google → 他の4記法（完了）
✅ パターン3: NumPy → 他の4記法（完了）

【書き換えのポイント】
- PEP 257: 概要のみ（最小限）
- Google: Args/Returns形式（読みやすい）
- NumPy: ハイフン + インデント（表形式）
- reST: :記法 + 2行ずつ（Sphinx用）
- Epytext: @記法（レガシー）

【デバッグプリントで確認できたこと】
✓ 各関数が何をしているか
✓ 書き換え前後
✓ 実行結果が正しいか
✓ 書き換えが成功したか


＃＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝－－
"""
Python 5大記法 改善チートシート
新人エンジニア向け
カイゼン前 → カイゼン後
"""

# ====================================
# 記法1: PEP 257
# ====================================

print("="*60)
print("【記法1】PEP 257 - 最小限スタイル")
print("="*60)

"""
特徴:
- 最もシンプル
- 1行で完結
- 引数・戻り値の説明なし
- 個人開発向け
"""

# ----- カイゼン前（悪い例）-----
def bad_pep257(x, y):
    """calc"""
    # 悪い点:
    # - 何を計算するか不明
    # - 動詞がない
    # - ピリオドがない
    return x + y


# ----- カイゼン後（良い例）-----
def good_pep257(x, y):
    """2つの数を足し算する。"""
    # 改善点:
    # ✓ 何をするか明確
    # ✓ 動詞で始まる
    # ✓ ピリオドで終わる
    return x + y


# ====================================
# 記法2: Google
# ====================================

print("\n" + "="*60)
print("【記法2】Google - チーム開発標準")
print("="*60)

"""
特徴:
- 読みやすい
- 書きやすい
- Args/Returns形式
- 業界標準
"""

# ----- カイゼン前（悪い例）-----
def bad_google(x, y, z=10):
    """
    計算する
    
    Args:
        x: 数
        y: 数
        z: 数
    """
    # 悪い点:
    # - 型情報がない
    # - 説明が不十分
    # - Returns がない
    # - デフォルト値の説明なし
    return x / y + z


# ----- カイゼン後（良い例）-----
def good_google(x, y, z=10):
    """
    (x / y) + z を計算する。
    
    Args:
        x (float): 割られる数
        y (float): 割る数
        z (float, optional): 加算する数。デフォルトは10
    
    Returns:
        float: 計算結果
    
    Raises:
        ValueError: yが0の場合
    """
    # 改善点:
    # ✓ 型情報がある
    # ✓ 説明が具体的
    # ✓ Returns がある
    # ✓ optional を明記
    # ✓ Raises がある
    
    if y == 0:
        raise ValueError("yは0以外")
    return x / y + z


# ====================================
# 記法3: NumPy
# ====================================

print("\n" + "="*60)
print("【記法3】NumPy - データ分析向け")
print("="*60)

"""
特徴:
- 表形式
- 詳細に書ける
- ハイフン使用
- 科学計算向け
"""

# ----- カイゼン前（悪い例）-----
def bad_numpy(data):
    """
    統計計算
    
    Parameters
    ---
    data: リスト
    
    Returns
    --
    結果
    """
    # 悪い点:
    # - ハイフンが少ない（3個）
    # - 型がない
    # - 説明が不十分
    # - インデントがない
    return sum(data) / len(data)


# ----- カイゼン後（良い例）-----
def good_numpy(data):
    """
    リストの平均値を計算する。
    
    Parameters
    ----------
    data : list of float
        数値のリスト
    
    Returns
    -------
    float
        平均値
    
    Examples
    --------
    >>> good_numpy([10, 20, 30])
    20.0
    """
    # 改善点:
    # ✓ ハイフン8個以上
    # ✓ 型がある（: 形式）
    # ✓ 説明がインデント
    # ✓ Examples がある
    
    return sum(data) / len(data)


# ====================================
# 記法4: reST (Sphinx)
# ====================================

print("\n" + "="*60)
print("【記法4】reST - 公式ドキュメント向け")
print("="*60)

"""
特徴:
- Sphinx用
- :記法
- 各引数2行
- 公式向け
"""

# ----- カイゼン前（悪い例）-----
def bad_rest(name, age):
    """
    ユーザー情報
    
    :param name: 名前
    :param age: 年齢
    :return: 文字列
    """
    # 悪い点:
    # - :type がない
    # - 説明が不十分
    # - :rtype がない
    
    return f"{name}さん（{age}歳）"


# ----- カイゼン後（良い例）-----
def good_rest(name, age):
    """
    ユーザー情報を整形する。
    
    :param name: ユーザーの名前
    :type name: str
    :param age: ユーザーの年齢
    :type age: int
    :return: 整形された文字列
    :rtype: str
    
    .. note::
       ageは0以上の整数を想定
    """
    # 改善点:
    # ✓ :type がある
    # ✓ 説明が具体的
    # ✓ :rtype がある
    # ✓ .. note:: がある
    
    return f"{name}さん（{age}歳）"


# ====================================
# 記法5: Epytext
# ====================================

print("\n" + "="*60)
print("【記法5】Epytext - レガシー（非推奨）")
print("="*60)

"""
特徴:
- @記法
- 古い
- 新規では使わない
- レガシー保守のみ
"""

# ----- カイゼン前（悪い例）-----
def bad_epytext(price, tax):
    """
    計算
    
    @param price: 価格
    @return: 結果
    """
    # 悪い点:
    # - @type がない
    # - 説明不足
    # - @rtype がない
    # - そもそも使うべきでない
    
    return price * (1 + tax)


# ----- カイゼン後（良い例）-----
def good_epytext(price, tax):
    """
    税込み価格を計算する。
    
    @param price: 税抜き価格
    @type price: int
    @param tax: 税率
    @type tax: float
    @return: 税込み価格
    @rtype: int
    
    @deprecated: 新規プロジェクトではGoogleスタイルを使用してください
    """
    # 改善点:
    # ✓ @type がある
    # ✓ 説明が具体的
    # ✓ @rtype がある
    # ✓ @deprecated で非推奨を明記
    # ただし新規では使わない！
    
    return int(price * (1 + tax))


# ====================================
# 比較表
# ====================================

print("\n" + "="*60)
print("【比較表】5大記法の使い分け")
print("="*60)
print("""
┌──────────┬──────────┬──────────┬──────────┐
│ 記法     │ 特徴     │ 使う場面 │ 推奨度   │
├──────────┼──────────┼──────────┼──────────┤
│ PEP 257  │ 最小限   │ 個人開発 │ ★★★☆☆ │
│ Google   │ 読みやすい│ チーム開発│ ★★★★★ │
│ NumPy    │ 詳細     │ データ分析│ ★★★★☆ │
│ reST     │ 公式向け │ OSS開発  │ ★★★☆☆ │
│ Epytext  │ レガシー │ 保守のみ │ ★☆☆☆☆ │
└──────────┴──────────┴──────────┴──────────┘

迷ったら → Googleスタイル！
""")


# ====================================
# チェックリスト
# ====================================

print("\n" + "="*60)
print("【チェックリスト】良いdocstringの条件")
print("="*60)
print("""
□ 三重引用符で囲んでいる
□ 概要が1行目にある
□ 動詞で始まる（〜する）
□ ピリオドで終わる
□ 全引数を説明している
□ 型情報がある
□ 戻り値を説明している
□ 例外を説明している（ある場合）
□ デフォルト値を明記（ある場合）
□ 使用例がある（複雑な場合）
""")


# ====================================
# よくある間違い
# ====================================

print("\n" + "="*60)
print("【よくある間違い】")
print("="*60)

# 間違い1: 引用符の数
def wrong1():
    "これは間違い"  # NG: 1個
    """これは正しい"""  # OK: 3個
    pass

# 間違い2: 位置
"""これは間違い"""  # NG: 関数の外
def wrong2():
    """これは正しい"""  # OK: 関数の直後
    pass

# 間違い3: 型の書き方（Google）
def wrong3(x):
    """
    Args:
        x int: 説明  # NG: カッコがない
        x (int): 説明  # OK: カッコがある
    """
    pass

# 間違い4: ハイフンの数（NumPy）
def wrong4(x):
    """
    Parameters
    ---  # NG: 3個
    ----------  # OK: 8個以上
    """
    pass


# ====================================
# 実行テスト
# ====================================

print("\n" + "="*60)
print("【実行テスト】カイゼン前後の比較")
print("="*60)

# PEP 257
print("\n[PEP 257]")
print("カイゼン前:", bad_pep257(10, 5))
print("カイゼン後:", good_pep257(10, 5))

# Google
print("\n[Google]")
print("カイゼン前:", bad_google(20, 4, 10))
print("カイゼン後:", good_google(20, 4, 10))

# NumPy
print("\n[NumPy]")
print("カイゼン前:", bad_numpy([10, 20, 30]))
print("カイゼン後:", good_numpy([10, 20, 30]))

# reST
print("\n[reST]")
print("カイゼン前:", bad_rest("太郎", 25))
print("カイゼン後:", good_rest("太郎", 25))

# Epytext
print("\n[Epytext]")
print("カイゼン前:", bad_epytext(1000, 0.1))
print("カイゼン後:", good_epytext(1000, 0.1))


# ====================================
# まとめ
# ====================================

print("\n" + "="*60)
print("【まとめ】")
print("="*60)
print("""
【カイゼンのポイント】

1. 型情報を必ず書く
   NG: x: 数
   OK: x (int): 整数

2. 説明は具体的に
   NG: データ
   OK: ユーザーIDのリスト

3. 戻り値を書く
   NG: （なし）
   OK: Returns: int: 合計値

4. 例外を書く
   NG: （なし）
   OK: Raises: ValueError: xが負の場合

5. デフォルト値を明記
   NG: z: 数
   OK: z (int, optional): デフォルトは10

【新人エンジニアへ】
- まずはGoogleスタイルから
- help()で確認する習慣を
- 既存コードのスタイルに合わせる
- 完璧を求めすぎない
- 継続が大切

頑張ってください！
""")


”＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# Python 5大記法 完全解説版
# 各行にコメントを追加してわかりやすく説明します

```python
"""
Python 5大記法 改善チートシート
新人エンジニア向け
カイゼン前 → カイゼン後
"""
# ↑これは「モジュールdocstring」
# ファイル全体の説明を書く場所です

# ====================================
# 記法1: PEP 257
# ====================================
# PEP = Python Enhancement Proposal（Python改善提案）の略
# 257番目の提案が「docstringの書き方」についてです

print("="*60)
# "=" を60回繰り返して区切り線を作ります
# 見やすくするための工夫です

print("【記法1】PEP 257 - 最小限スタイル")
# 画面に表示するメッセージです

print("="*60)
# また区切り線（枠で囲むイメージ）

"""
特徴:
- 最もシンプル
- 1行で完結
- 引数・戻り値の説明なし
- 個人開発向け
"""
# ↑これもdocstring（説明文）
# セクション全体の説明を書いています

# ----- カイゼン前（悪い例）-----
# ここから悪い例を示します

def bad_pep257(x, y):
    # def = 関数を定義する命令
    # bad_pep257 = 関数の名前
    # (x, y) = この関数が受け取る値（引数）
    
    """calc"""
    # ↑これがdocstring（関数の説明）
    # でも「calc」だけでは何も分からない！
    
    # 悪い点:
    # - 何を計算するか不明
    # - 動詞がない
    # - ピリオドがない
    
    return x + y
    # return = 関数の結果を返す命令
    # x + y = xとyを足し算した結果を返す


# ----- カイゼン後（良い例）-----

def good_pep257(x, y):
    # 同じ機能の関数だけど、説明が良くなっています
    
    """2つの数を足し算する。"""
    # ↑改善されたdocstring
    # 何をするか一目でわかります
    
    # 改善点:
    # ✓ 何をするか明確
    # ✓ 動詞で始まる（「足し算する」）
    # ✓ ピリオドで終わる（。）
    
    return x + y
    # 処理は同じだけど、説明がわかりやすくなりました


# ====================================
# 記法2: Google
# ====================================
# Googleが開発した書き方
# 世界中で最もよく使われています

print("\n" + "="*60)
# \n = 改行（1行空ける）
# "="*60 = また区切り線

print("【記法2】Google - チーム開発標準")
print("="*60)

"""
特徴:
- 読みやすい
- 書きやすい
- Args/Returns形式
- 業界標準
"""
# Args = Arguments（引数）の略
# Returns = 戻り値のこと

# ----- カイゼン前（悪い例）-----

def bad_google(x, y, z=10):
    # z=10 は「デフォルト値」
    # zを指定しなかったら自動で10になります
    
    """
    計算する
    
    Args:
        x: 数
        y: 数
        z: 数
    """
    # ↑説明が雑すぎる！
    # 「数」だけでは何の数か分からない
    
    # 悪い点:
    # - 型情報がない（整数？小数？）
    # - 説明が不十分
    # - Returns がない（何が返ってくるの？）
    # - デフォルト値の説明なし
    
    return x / y + z
    # x割るy、その結果にzを足す


# ----- カイゼン後（良い例）-----

def good_google(x, y, z=10):
    # 同じ関数だけど説明が超詳しい！
    
    """
    (x / y) + z を計算する。
    
    Args:
        x (float): 割られる数
        y (float): 割る数
        z (float, optional): 加算する数。デフォルトは10
    
    Returns:
        float: 計算結果
    
    Raises:
        ValueError: yが0の場合
    """
    # Args: 引数の説明
    #   - (float) = 型情報（小数）
    #   - optional = 省略可能という意味
    # Returns: 何が返ってくるか
    # Raises: どんなエラーが起きるか
    
    # 改善点:
    # ✓ 型情報がある（float = 小数）
    # ✓ 説明が具体的
    # ✓ Returns がある
    # ✓ optional を明記
    # ✓ Raises がある（エラー情報）
    
    if y == 0:
        # if = もし〜なら
        # y == 0 = yが0と等しいなら
        
        raise ValueError("yは0以外")
        # raise = エラーを発生させる
        # ValueError = 値が不正というエラー
        # 0で割るとエラーになるので防いでいます
        
    return x / y + z
    # yが0じゃなければ、ちゃんと計算します


# ====================================
# 記法3: NumPy
# ====================================
# NumPy = 数値計算ライブラリ
# データ分析でよく使われる書き方

print("\n" + "="*60)
print("【記法3】NumPy - データ分析向け")
print("="*60)

"""
特徴:
- 表形式
- 詳細に書ける
- ハイフン使用
- 科学計算向け
"""

# ----- カイゼン前（悪い例）-----

def bad_numpy(data):
    # data = リストを受け取る
    
    """
    統計計算
    
    Parameters
    ---
    data: リスト
    
    Returns
    --
    結果
    """
    # Parameters = 引数（Argsと同じ意味）
    # --- = ハイフンが3個（少なすぎ！）
    # 正しくは8個以上必要
    
    # 悪い点:
    # - ハイフンが少ない（3個）
    # - 型がない
    # - 説明が不十分
    # - インデントがない
    
    return sum(data) / len(data)
    # sum(data) = dataの合計
    # len(data) = dataの個数
    # 合計÷個数 = 平均値


# ----- カイゼン後（良い例）-----

def good_numpy(data):
    """
    リストの平均値を計算する。
    
    Parameters
    ----------
    data : list of float
        数値のリスト
    
    Returns
    -------
    float
        平均値
    
    Examples
    --------
    >>> good_numpy([10, 20, 30])
    20.0
    """
    # ---------- = ハイフン10個（正しい！）
    # data : list of float = 型の書き方
    #   コロン（:）の後に型を書く
    # 説明が4スペース字下げされている
    # Examples = 使用例を示している
    # >>> = Pythonの対話モードの記号
    
    # 改善点:
    # ✓ ハイフン8個以上
    # ✓ 型がある（: 形式）
    # ✓ 説明がインデント
    # ✓ Examples がある
    
    return sum(data) / len(data)
    # 処理は同じ


# ====================================
# 記法4: reST (Sphinx)
# ====================================
# reST = reStructuredText（文書の書き方の一つ）
# Sphinx = ドキュメント生成ツール
# 公式ドキュメントを作るときに使います

print("\n" + "="*60)
print("【記法4】reST - 公式ドキュメント向け")
print("="*60)

"""
特徴:
- Sphinx用
- :記法
- 各引数2行
- 公式向け
"""
# :記法 = コロンで始まる特別な書き方

# ----- カイゼン前（悪い例）-----

def bad_rest(name, age):
    """
    ユーザー情報
    
    :param name: 名前
    :param age: 年齢
    :return: 文字列
    """
    # :param = parameter（引数）の略
    # :return = 戻り値
    # でも型情報がない！
    
    # 悪い点:
    # - :type がない
    # - 説明が不十分
    # - :rtype がない
    
    return f"{name}さん（{age}歳）"
    # f"{name}さん" = f-string（文字列の埋め込み）
    # {name}の部分に変数nameの値が入ります
    # 例: name="太郎" なら "太郎さん"


# ----- カイゼン後（良い例）-----

def good_rest(name, age):
    """
    ユーザー情報を整形する。
    
    :param name: ユーザーの名前
    :type name: str
    :param age: ユーザーの年齢
    :type age: int
    :return: 整形された文字列
    :rtype: str
    
    .. note::
       ageは0以上の整数を想定
    """
    # :param name: 引数nameの説明
    # :type name: str = nameの型はstr（文字列）
    # :param age: 引数ageの説明
    # :type age: int = ageの型はint（整数）
    # :return: 戻り値の説明
    # :rtype: str = 戻り値の型はstr
    # .. note:: = 注意書き
    
    # 改善点:
    # ✓ :type がある
    # ✓ 説明が具体的
    # ✓ :rtype がある
    # ✓ .. note:: がある
    
    return f"{name}さん（{age}歳）"
    # 処理は同じ


# ====================================
# 記法5: Epytext
# ====================================
# Epytext = 古いドキュメント記法
# 今は使わないけど、古いコードで見かけることがあります

print("\n" + "="*60)
print("【記法5】Epytext - レガシー（非推奨）")
print("="*60)

"""
特徴:
- @記法
- 古い
- 新規では使わない
- レガシー保守のみ
"""
# レガシー = 古い、時代遅れ
# 保守 = すでにあるコードを直すこと

# ----- カイゼン前（悪い例）-----

def bad_epytext(price, tax):
    """
    計算
    
    @param price: 価格
    @return: 結果
    """
    # @param = 引数（:paramと同じ意味）
    # @を使うのが古いスタイル
    
    # 悪い点:
    # - @type がない
    # - 説明不足
    # - @rtype がない
    # - そもそも使うべきでない
    
    return price * (1 + tax)
    # price * (1 + tax) = 税込み価格の計算
    # 例: 1000円、税率10%(0.1)なら
    #     1000 * (1 + 0.1) = 1000 * 1.1 = 1100円


# ----- カイゼン後（良い例）-----

def good_epytext(price, tax):
    """
    税込み価格を計算する。
    
    @param price: 税抜き価格
    @type price: int
    @param tax: 税率
    @type tax: float
    @return: 税込み価格
    @rtype: int
    
    @deprecated: 新規プロジェクトではGoogleスタイルを使用してください
    """
    # @type price: int = priceの型は整数
    # @type tax: float = taxの型は小数
    # @rtype: int = 戻り値の型は整数
    # @deprecated = 非推奨（使わないで！）という意味
    
    # 改善点:
    # ✓ @type がある
    # ✓ 説明が具体的
    # ✓ @rtype がある
    # ✓ @deprecated で非推奨を明記
    # ただし新規では使わない！
    
    return int(price * (1 + tax))
    # int() = 小数を整数に変換
    # 1100.0 → 1100


# ====================================
# 比較表
# ====================================

print("\n" + "="*60)
print("【比較表】5大記法の使い分け")
print("="*60)
print("""
┌──────────┬──────────┬──────────┬──────────┐
│ 記法     │ 特徴     │ 使う場面 │ 推奨度   │
├──────────┼──────────┼──────────┼──────────┤
│ PEP 257  │ 最小限   │ 個人開発 │ ★★★☆☆ │
│ Google   │ 読みやすい│ チーム開発│ ★★★★★ │
│ NumPy    │ 詳細     │ データ分析│ ★★★★☆ │
│ reST     │ 公式向け │ OSS開発  │ ★★★☆☆ │
│ Epytext  │ レガシー │ 保守のみ │ ★☆☆☆☆ │
└──────────┴──────────┴──────────┴──────────┘

迷ったら → Googleスタイル！
""")
# この表は文字で描いた表（罫線素）
# ★の数で推奨度を表しています
# Googleスタイルが最も推奨（★5つ）


# ====================================
# チェックリスト
# ====================================

print("\n" + "="*60)
print("【チェックリスト】良いdocstringの条件")
print("="*60)
print("""
□ 三重引用符で囲んでいる
□ 概要が1行目にある
□ 動詞で始まる（〜する）
□ ピリオドで終わる
□ 全引数を説明している
□ 型情報がある
□ 戻り値を説明している
□ 例外を説明している（ある場合）
□ デフォルト値を明記（ある場合）
□ 使用例がある（複雑な場合）
""")
# □ = チェックボックス
# これらを満たせば良いdocstring！


# ====================================
# よくある間違い
# ====================================

print("\n" + "="*60)
print("【よくある間違い】")
print("="*60)

# 間違い1: 引用符の数
def wrong1():
    "これは間違い"  # NG: " が1個だけ
    """これは正しい"""  # OK: """ が3個
    pass  # pass = 何もしない（空の関数）

# 間違い2: 位置
"""これは間違い"""  # NG: 関数の外に書いてる
def wrong2():
    """これは正しい"""  # OK: defの直後
    pass

# 間違い3: 型の書き方（Google）
def wrong3(x):
    """
    Args:
        x int: 説明  # NG: カッコがない
        x (int): 説明  # OK: (int)とカッコで囲む
    """
    pass

# 間違い4: ハイフンの数（NumPy）
def wrong4(x):
    """
    Parameters
    ---  # NG: ハイフン3個（少ない）
    ----------  # OK: ハイフン8個以上
    """
    pass


# ====================================
# 実行テスト
# ====================================

print("\n" + "="*60)
print("【実行テスト】カイゼン前後の比較")
print("="*60)

# PEP 257
print("\n[PEP 257]")
print("カイゼン前:", bad_pep257(10, 5))
# bad_pep257(10, 5) を実行
# 10 + 5 = 15

print("カイゼン後:", good_pep257(10, 5))
# good_pep257(10, 5) を実行
# 10 + 5 = 15（結果は同じ、説明が良くなった）

# Google
print("\n[Google]")
print("カイゼン前:", bad_google(20, 4, 10))
# 20 / 4 + 10 = 5 + 10 = 15

print("カイゼン後:", good_google(20, 4, 10))
# 同じ計算、同じ結果

# NumPy
print("\n[NumPy]")
print("カイゼン前:", bad_numpy([10, 20, 30]))
# [10, 20, 30]の平均 = (10+20+30)/3 = 20.0

print("カイゼン後:", good_numpy([10, 20, 30]))
# 同じ計算、同じ結果

# reST
print("\n[reST]")
print("カイゼン前:", bad_rest("太郎", 25))
# "太郎さん（25歳）"と表示

print("カイゼン後:", good_rest("太郎", 25))
# 同じ結果

# Epytext
print("\n[Epytext]")
print("カイゼン前:", bad_epytext(1000, 0.1))
# 1000 * (1 + 0.1) = 1000 * 1.1 = 1100.0

print("カイゼン後:", good_epytext(1000, 0.1))
# int(1100.0) = 1100（整数化）


# ====================================
# まとめ
# ====================================

print("\n" + "="*60)
print("【まとめ】")
print("="*60)
print("""
【カイゼンのポイント】

1. 型情報を必ず書く
   NG: x: 数
   OK: x (int): 整数

2. 説明は具体的に
   NG: データ
   OK: ユーザーIDのリスト

3. 戻り値を書く
   NG: （なし）
   OK: Returns: int: 合計値

4. 例外を書く
   NG: （なし）
   OK: Raises: ValueError: xが負の場合

5. デフォルト値を明記
   NG: z: 数
   OK: z (int, optional): デフォルトは10

【新人エンジニアへ】
- まずはGoogleスタイルから
- help()で確認する習慣を
- 既存コードのスタイルに合わせる
- 完璧を求めすぎない
- 継続が大切

頑張ってください！
""")
# 最後に重要ポイントをまとめています
```

---

## 🎓 超重要ポイント

1. **"""（三重引用符）** = docstringの目印
2. **def の直後** に書く = 関数の説明
3. **Googleスタイル** から始めよう = 世界標準
4. **型を書く** = (int), (str), (float)など
5. **help(関数名)** で確認できる！

試しに `help(good_google)` って打ってみると、書いたdocstringが表示されますよ！

あっ！これは **PowerShell** のエラーですね！

PowerShellで `help()` を実行しようとしています。でもPythonのコードなので、**Pythonで実行**する必要があります😊

## 🔧 正しい実行方法

### ステップ1: Pythonファイルを作る
1. さっきのコードを `docstring_test.py` という名前で保存
2. 保存場所: `C:\Users\yukik\Downloads\` でOK

### ステップ2: Pythonで実行

```powershell
# PowerShellで、まずPythonを起動
python

# ↑これでPythonの対話モードになります
# >>> という記号が出たら成功！
```

### ステップ3: ファイルを読み込む

```python
>>> # Pythonの対話モード内で実行
>>> exec(open('docstring_test.py').read())
```

これで全部のコードが実行されます！

---

## 📝 もっと簡単な方法：helpを試すだけ

もし `help()` の動作だけ見たいなら、PowerShellで：

```powershell
python -c "
def good_google(x, y, z=10):
    '''
    (x / y) + z を計算する。
    
    Args:
        x (float): 割られる数
        y (float): 割る数
        z (float, optional): 加算する数。デフォルトは10
    
    Returns:
        float: 計算結果
    '''
    if y == 0:
        raise ValueError('yは0以外')
    return x / y + z

help(good_google)
"
```

でも長いので...

---

## ⚡ 一番簡単な確認方法

```powershell
# 1. Pythonを起動
python

# 2. Pythonの中で関数を定義して確認
```

Pythonの対話モードで：

```python
>>> def good_google(x, y, z=10):
...     """
...     (x / y) + z を計算する。
...     
...     Args:
...         x (float): 割られる数
...         y (float): 割る数
...         z (float, optional): 加算する数。デフォルトは10
...     
...     Returns:
...         float: 計算結果
...     """
...     if y == 0:
...         raise ValueError("yは0以外")
...     return x / y + z
... 
>>> # ↑ここまで入力したら、Enterを2回押す
>>> 
>>> help(good_google)
```

すると、こんな感じで表示されます↓

```
Help on function good_google in module __main__:

good_google(x, y, z=10)
    (x / y) + z を計算する。
    
    Args:
        x (float): 割られる数
        y (float): 割る数
        z (float, optional): 加算する数。デフォルトは10
    
    Returns:
        float: 計算結果
```

---

## 🎯 まとめ

| エラーの原因 | 解決方法 |
|------------|---------|
| PowerShellで実行してる | `python` と入力してPythonに切り替え |
| 関数が定義されてない | 先に関数を定義する必要がある |

**今の状況**: PowerShell（Windowsのコマンド）で実行 ❌  
**正しい状況**: Python対話モードで実行 ✅

もう一度試してみてください！わからなかったらまた聞いてくださいね😊


#
