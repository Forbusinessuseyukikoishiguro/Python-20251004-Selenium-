"""
====================================
Docstring 5スタイル チートシート
シンプル・使いやすい・即戦力
一行ずつコメント付き
====================================
"""
# このファイルは5つのdocstring記法を学ぶためのチートシート
# コピー＆ペーストして即使用可能

# ====================================
# テンプレート集（コピペ用）
# ====================================

# ------------------------------
# 1. PEP 257（最小限）
# ------------------------------
# PEP 257 = Python公式の最小限スタイル
# 特徴: 1行で済む、シンプル

def template_pep257(arg1, arg2):
    """関数の説明を1行で。"""
    # 三重引用符で囲む（これがdocstring）
    # 1行で何をする関数か書く
    # ピリオド . で終わる
    pass  # 処理は省略（テンプレートなので）


# ------------------------------
# 2. Google（推奨★）
# ------------------------------
# Googleスタイル = 世界で最も人気
# 特徴: 読みやすい、書きやすい、初心者向け

def template_google(arg1, arg2):
    """
    関数の説明。
    
    Args:
        arg1 (型): 説明
        arg2 (型): 説明
    
    Returns:
        型: 説明
    """
    # 1行目: 概要（何をする関数か）
    # 
    # 2行目: 空行（必須）
    # 
    # Args: 引数の説明セクション
    #   arg1 (型): 引数の説明
    #   ↑    ↑    ↑
    #   名前 型   何のための引数か
    # 
    # Returns: 戻り値の説明セクション
    #   型: 何を返すか
    
    pass  # 処理は省略


# ------------------------------
# 3. NumPy（科学系）
# ------------------------------
# NumPyスタイル = データサイエンス向け
# 特徴: 表形式、詳細に書ける

def template_numpy(arg1, arg2):
    """
    関数の説明。
    
    Parameters
    ----------
    arg1 : 型
        説明
    arg2 : 型
        説明
    
    Returns
    -------
    型
        説明
    """
    # 1行目: 概要
    # 
    # Parameters （Argsじゃない！）
    # ---------- （ハイフン8個以上）
    #   arg1 : 型 （型の前にコロン）
    #       説明（次の行にインデント4スペース）
    # 
    # Returns （複数形）
    # ------- （ハイフン7個以上）
    #   型
    #       説明（次の行にインデント）
    
    pass


# ------------------------------
# 4. reST（Sphinx）
# ------------------------------
# reSTスタイル = 公式ドキュメント生成向け
# 特徴: Sphinxで使う、コロンで始まる

def template_rest(arg1, arg2):
    """
    関数の説明。
    
    :param arg1: 説明
    :type arg1: 型
    :param arg2: 説明
    :type arg2: 型
    :return: 説明
    :rtype: 型
    """
    # :param 引数名: 説明
    # ↑     ↑       ↑
    # コロン 名前   説明
    # 
    # :type 引数名: 型
    # ↑     ↑      ↑
    # コロン 名前  型
    # 
    # 各引数ごとに2行必要（paramとtypeのセット）
    # 
    # :return: 戻り値の説明
    # :rtype: 戻り値の型
    
    pass


# ------------------------------
# 5. Epytext（非推奨）
# ------------------------------
# Epytextスタイル = 古い記法
# 特徴: Javadoc風、今は使わない

def template_epytext(arg1, arg2):
    """
    関数の説明。
    
    @param arg1: 説明
    @type arg1: 型
    @param arg2: 説明
    @type arg2: 型
    @return: 説明
    @rtype: 型
    """
    # @ で始まる（reSTは : で始まる）
    # 
    # @param 引数名: 説明
    # @type 引数名: 型
    # 
    # reSTとほぼ同じだが @ を使う
    # 
    # 注意: 新規プロジェクトでは使わないこと！
    # レガシーコード保守の時だけ
    
    pass


# ====================================
# 書き換え例: 同じ関数を5スタイルで
# ====================================

# ----- 元の関数（docstringなし）-----
def calc(x, y):
    # docstringがない
    # 何をする関数か分からない
    # 引数の意味も不明
    return x + y  # 足し算している


# ------------------------------
# 1. PEP 257版
# ------------------------------
def calc_pep257(x, y):
    """2つの数を足し算する。"""
    # PEP 257:
    # - 1行で完結
    # - 何をするかだけ書く
    # - 引数の説明はなし
    
    return x + y  # x と y を足す


# ------------------------------
# 2. Google版
# ------------------------------
def calc_google(x, y):
    """
    2つの数を足し算する。
    
    Args:
        x (int): 1つ目の数
        y (int): 2つ目の数
    
    Returns:
        int: x + y の結果
    """
    # Googleスタイル:
    # - Args: で引数を説明
    # - x (int): のように型を書く
    # - Returns: で戻り値を説明
    # - 読みやすい！
    
    return x + y  # 足し算


# ------------------------------
# 3. NumPy版
# ------------------------------
def calc_numpy(x, y):
    """
    2つの数を足し算する。
    
    Parameters
    ----------
    x : int
        1つ目の数
    y : int
        2つ目の数
    
    Returns
    -------
    int
        x + y の結果
    """
    # NumPyスタイル:
    # - Parameters の下に --------
    # - x : int のようにコロンで型
    # - 説明は次の行にインデント
    # - 表形式っぽい
    
    return x + y


# ------------------------------
# 4. reST版
# ------------------------------
def calc_rest(x, y):
    """
    2つの数を足し算する。
    
    :param x: 1つ目の数
    :type x: int
    :param y: 2つ目の数
    :type y: int
    :return: x + y の結果
    :rtype: int
    """
    # reSTスタイル:
    # - :param x: で引数の説明
    # - :type x: で引数の型
    # - 各引数2行ずつ
    # - Sphinx用
    
    return x + y


# ------------------------------
# 5. Epytext版
# ------------------------------
def calc_epytext(x, y):
    """
    2つの数を足し算する。
    
    @param x: 1つ目の数
    @type x: int
    @param y: 2つ目の数
    @type y: int
    @return: x + y の結果
    @rtype: int
    """
    # Epytextスタイル:
    # - @ で始まる
    # - reSTとほぼ同じ
    # - 今は使わない（非推奨）
    
    return x + y


# ====================================
# クイックリファレンス
# ====================================
# すぐに参照できる構文一覧

"""
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ クイックリファレンス            ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

【PEP 257】
\"\"\"説明。\"\"\"
# 1行だけ
# シンプル

【Google】
Args:
    name (型): 説明
Returns:
    型: 説明
# 読みやすい
# 推奨★

【NumPy】
Parameters
----------
name : 型
    説明
Returns
-------
型
    説明
# 表形式
# データ分析向け

【reST】
:param name: 説明
:type name: 型
:return: 説明
:rtype: 型
# Sphinx用
# 公式Doc向け

【Epytext】
@param name: 説明
@type name: 型
@return: 説明
@rtype: 型
# 古い
# 使わない
"""


# ====================================
# 書き換え早見表
# ====================================
# スタイル間の変換方法

"""
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ PEP 257 → Google              ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

# ビフォー（PEP 257）
\"\"\"説明。\"\"\"

    ↓ 変換

# アフター（Google）
\"\"\"
説明。

Args:
    引数名 (型): 説明

Returns:
    型: 説明
\"\"\"

# 変換手順:
# 1. 概要はそのまま
# 2. Args: セクション追加
# 3. Returns: セクション追加


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Google → NumPy                ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

# ビフォー（Google）
Args:
    name (型): 説明
Returns:
    型: 説明

    ↓ 変換

# アフター（NumPy）
Parameters
----------
name : 型
    説明
Returns
-------
型
    説明

# 変換手順:
# 1. Args → Parameters
# 2. Parameters の下に --------
# 3. (型) → : 型 に変更
# 4. 説明を次の行に移動


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Google → reST                 ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

# ビフォー（Google）
Args:
    name (型): 説明
Returns:
    型: 説明

    ↓ 変換

# アフター（reST）
:param name: 説明
:type name: 型
:return: 説明
:rtype: 型

# 変換手順:
# 1. Args: を削除
# 2. 各引数を :param name: に
# 3. 型を :type name: に分離
# 4. Returns: を :return: に
# 5. 型を :rtype: に分離
"""


# ====================================
# 使い分けガイド
# ====================================
# 状況別の推奨スタイル

"""
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ どれを使う？                   ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

個人開発         → PEP 257
# 小さいスクリプト
# 自分だけが見る

チーム開発       → Google ★推奨
# 複数人で開発
# Webアプリ
# 一番人気

データ分析       → NumPy
# Pandas使う
# Jupyter Notebook
# 科学計算

公式ドキュメント → reST
# Sphinxでドキュメント生成
# OSSライブラリ
# Python標準ライブラリレベル

レガシー保守     → Epytext（避ける）
# 古いコードの保守のみ
# 新規では絶対使わない

迷ったら → Google を使う！
"""


# ====================================
# 実行テスト
# ====================================
# このファイルを実行すると動作確認できる

if __name__ == "__main__":
    # メインブロック（直接実行された時だけ動く）
    
    print("="*50)  # 区切り線
    print("5スタイル 動作確認")  # タイトル
    print("="*50)  # 区切り線
    
    # テスト用の変数
    x, y = 10, 5  # x=10, y=5
    
    # 各スタイルの関数を実行
    print(f"\nPEP 257  : {calc_pep257(x, y)}")  # 15
    print(f"Google   : {calc_google(x, y)}")   # 15
    print(f"NumPy    : {calc_numpy(x, y)}")    # 15
    print(f"reST     : {calc_rest(x, y)}")     # 15
    print(f"Epytext  : {calc_epytext(x, y)}")  # 15
    
    # 結論
    print("\n" + "="*50)  # 区切り線
    print("結論: Googleスタイルを使おう!")  # 推奨
    print("="*50)  # 区切り線
    
    # help()で確認する方法（コメントアウトを外すと実行）
    # print("\n【Google版のhelp()】")
    # help(calc_google)
    # 出力例:
    # calc_google(x, y)
    #     2つの数を足し算する。
    #     
    #     Args:
    #         x (int): 1つ目の数
    #         y (int): 2つ目の数
    #     
    #     Returns:
    #         int: x + y の結果