Python docstring完全ガイド 🐍

新人エンジニアが最初に学ぶべきドキュメント記法

📖 目次

docstringとは？

5大記法の比較

各記法の詳細解説

実践：help()で確認する

よくあるエラーと解決方法

チェックリスト

まとめ

docstringとは？

docstring（ドックストリング） = 関数やクラスの説明文

基本ルール

def 関数名(引数):
    """ここに説明を書く（三重引用符で囲む）"""
    処理


なぜ必要？

✅ 他の人が読んでもわかる

✅ 未来の自分が読んでもわかる

✅ help(関数名) で説明が表示される

✅ チーム開発で必須

5大記法の比較

記法 特徴 使う場面 推奨度 PEP 257 最小限（1行） 個人開発 ★★★☆☆ Google 読みやすい チーム開発 ★★★★★ NumPy 詳細な表形式 データ分析 ★★★★☆ reST Sphinx用 公式ドキュメント ★★★☆☆ Epytext 古い（@記法） 保守のみ ★☆☆☆☆

迷ったら？

→ Googleスタイル一択！ 世界標準で最も読みやすい

各記法の詳細解説

1. PEP 257（最小限スタイル）

特徴: シンプル、1行で完結

❌ 悪い例

def add(x, y):
    """calc"""
    return x + y


問題点:

何を計算するか不明

動詞がない

ピリオドがない

✅ 良い例

def add(x, y):
    """2つの数を足し算する。"""
    return x + y


改善点:

何をするか明確

動詞で始まる（「足し算する」）

ピリオドで終わる（。）

2. Google（推奨スタイル）⭐

特徴: 読みやすい、書きやすい、Args/Returns形式

❌ 悪い例

def calculate(x, y, z=10):
    """
    計算する
    
    Args:
        x: 数
        y: 数
        z: 数
    """
    return x / y + z


問題点:

型情報がない

説明が不十分

Returns がない

デフォルト値の説明なし

✅ 良い例

def calculate(x, y, z=10):
    """
    (x / y) + z を計算する。
    
    Args:
        x (float): 割られる数
        y (float): 割る数
        z (float, optional): 加算する数。デフォルトは10
    
    Returns:
        float: 計算結果
    
    Raises:
        ValueError: yが0の場合
    """
    if y == 0:
        raise ValueError("yは0以外")
    return x / y + z


改善点:

✅ 型情報がある（float）

✅ 説明が具体的

✅ Returns がある

✅ optional を明記

✅ Raises がある（エラー情報）

3. NumPy（データ分析向け）

特徴: 表形式、ハイフン使用、詳細に書ける

❌ 悪い例

def calculate_mean(data):
    """
    統計計算
    
    Parameters
    ---
    data: リスト
    
    Returns
    --
    結果
    """
    return sum(data) / len(data)


問題点:

ハイフンが少ない（3個）→ 8個以上必要

型がない

説明が不十分

✅ 良い例

def calculate_mean(data):
    """
    リストの平均値を計算する。
    
    Parameters
    ----------
    data : list of float
        数値のリスト
    
    Returns
    -------
    float
        平均値
    
    Examples
    --------
    >>> calculate_mean([10, 20, 30])
    20.0
    """
    return sum(data) / len(data)


改善点:

✅ ハイフン8個以上（----------）

✅ 型がある（: 形式）

✅ 説明がインデント

✅ Examples がある

4. reST / Sphinx（公式ドキュメント向け）

特徴: :記法、各引数2行、Sphinx用

❌ 悪い例

def format_user(name, age):
    """
    ユーザー情報
    
    :param name: 名前
    :param age: 年齢
    :return: 文字列
    """
    return f"{name}さん（{age}歳）"


問題点:

:type がない

説明が不十分

:rtype がない

✅ 良い例

def format_user(name, age):
    """
    ユーザー情報を整形する。
    
    :param name: ユーザーの名前
    :type name: str
    :param age: ユーザーの年齢
    :type age: int
    :return: 整形された文字列
    :rtype: str
    
    .. note::
       ageは0以上の整数を想定
    """
    return f"{name}さん（{age}歳）"


改善点:

✅ :type がある

✅ 説明が具体的

✅ :rtype がある

✅ .. note:: がある

5. Epytext（非推奨）

特徴: @記法、古い、新規では使わない

なぜ非推奨？

古い記法（レガシー）

新規プロジェクトでは使わない

既存コードの保守でのみ見かける

参考例

def calculate_tax(price, tax):
    """
    税込み価格を計算する。
    
    @param price: 税抜き価格
    @type price: int
    @param tax: 税率
    @type tax: float
    @return: 税込み価格
    @rtype: int
    
    @deprecated: 新規プロジェクトではGoogleスタイルを使用してください
    """
    return int(price * (1 + tax))


新規開発では使わないこと！

実践：help()で確認する

ステップ1: 関数を定義

def my_function(name, age):
    """ユーザー情報を表示する。
    
    Args:
        name (str): ユーザーの名前
        age (int): ユーザーの年齢
    
    Returns:
        str: 整形された文字列
    """
    return f"{name}さんは{age}歳です"


ステップ2: helpで確認

help(my_function)


実行結果

Help on function my_function in module __main__:

my_function(name, age)
    ユーザー情報を表示する。
    
    Args:
        name (str): ユーザーの名前
        age (int): ユーザーの年齢
    
    Returns:
        str: 整形された文字列


書いたdocstringが整形されて表示される！

よくあるエラーと解決方法

エラー1: 引用符の数が間違い

# ❌ 間違い
def wrong():
    "これは間違い"  # 1個だけ
    pass

# ✅ 正しい
def correct():
    """これは正しい"""  # 3個
    pass


エラー2: 位置が間違い

# ❌ 間違い
"""これは間違い"""  # 関数の外
def wrong():
    pass

# ✅ 正しい
def correct():
    """これは正しい"""  # defの直後
    pass


エラー3: 型の書き方（Google）

# ❌ 間違い
def wrong(x):
    """
    Args:
        x int: 説明  # カッコがない
    """
    pass

# ✅ 正しい
def correct(x):
    """
    Args:
        x (int): 説明  # カッコで囲む
    """
    pass


エラー4: ハイフンの数（NumPy）

# ❌ 間違い
def wrong(x):
    """
    Parameters
    ---  # 3個（少ない）
    """
    pass

# ✅ 正しい
def correct(x):
    """
    Parameters
    ----------  # 8個以上
    """
    pass


エラー5: UnicodeDecodeError（日本語の文字化け）

# ❌ 問題が起きる
exec(open('file.py').read())

# ✅ 解決方法
exec(open('file.py', encoding='utf-8').read())


または ファイルの先頭に追加：

# -*- coding: utf-8 -*-


チェックリスト

良いdocstringの条件：

[ ] 三重引用符（"""）で囲んでいる

[ ] 概要が1行目にある

[ ] 動詞で始まる（〜する）

[ ] ピリオドで終わる

[ ] 全引数を説明している

[ ] 型情報がある

[ ] 戻り値を説明している

[ ] 例外を説明している（ある場合）

[ ] デフォルト値を明記（ある場合）

[ ] 使用例がある（複雑な場合）

まとめ

カイゼンのポイント

1. 型情報を必ず書く

# ❌ NG
x: 数

# ✅ OK
x (int): 整数


2. 説明は具体的に

# ❌ NG
データ

# ✅ OK
ユーザーIDのリスト


3. 戻り値を書く

# ❌ NG
（なし）

# ✅ OK
Returns:
    int: 合計値


4. 例外を書く

# ❌ NG
（なし）

# ✅ OK
Raises:
    ValueError: xが負の場合


5. デフォルト値を明記

# ❌ NG
z: 数

# ✅ OK
z (int, optional): デフォルトは10


新人エンジニアへのアドバイス

スタートは簡単に

まずはGoogleスタイルから始める

help()で確認する習慣をつける

既存コードのスタイルに合わせる

完璧を求めすぎない

継続が大切

実践方法

# 1. 関数を書く
def my_calc(x, y):
    """2つの数を掛け算する。
    
    Args:
        x (int): 1つ目の数
        y (int): 2つ目の数
    
    Returns:
        int: x × y の結果
    """
    return x * y

# 2. helpで確認
help(my_calc)

# 3. 実行してテスト
print(my_calc(5, 3))  # 15


クイックリファレンス

Googleスタイル（コピペ用）

def function_name(arg1, arg2, arg3=default):
    """1行で概要を書く。
    
    詳細な説明がある場合はここに書く。
    複数行でもOK。
    
    Args:
        arg1 (型): 引数1の説明
        arg2 (型): 引数2の説明
        arg3 (型, optional): 引数3の説明。デフォルトはdefault
    
    Returns:
        型: 戻り値の説明
    
    Raises:
        ExceptionType: エラーが起きる条件
    
    Examples:
        >>> function_name(1, 2)
        3
    """
    # 処理
    pass


参考リンク

PEP 257: Python公式のdocstring規約

Googleスタイル: 最も推奨される記法

NumPy/SciPyスタイル: データ分析プロジェクト向け

Sphinx: ドキュメント生成ツール

最後に

docstringはコードを書く時間と同じくらい大切です。

未来の自分、チームメイト、オープンソースのユーザーのために、 わかりやすい説明を書く習慣をつけましょう！

頑張ってください！ 🚀

Python 5大記法 完全解説版

各行にコメントを追加してわかりやすく説明します

"""
Python 5大記法 改善チートシート
新人エンジニア向け
カイゼン前 → カイゼン後
"""
# ↑これは「モジュールdocstring」
# ファイル全体の説明を書く場所です

# ====================================
# 記法1: PEP 257
# ====================================
# PEP = Python Enhancement Proposal（Python改善提案）の略
# 257番目の提案が「docstringの書き方」についてです

print("="*60)
# "=" を60回繰り返して区切り線を作ります
# 見やすくするための工夫です

print("【記法1】PEP 257 - 最小限スタイル")
# 画面に表示するメッセージです

print("="*60)
# また区切り線（枠で囲むイメージ）

"""
特徴:
- 最もシンプル
- 1行で完結
- 引数・戻り値の説明なし
- 個人開発向け
"""
# ↑これもdocstring（説明文）
# セクション全体の説明を書いています

# ----- カイゼン前（悪い例）-----
# ここから悪い例を示します

def bad_pep257(x, y):
    # def = 関数を定義する命令
    # bad_pep257 = 関数の名前
    # (x, y) = この関数が受け取る値（引数）
    
    """calc"""
    # ↑これがdocstring（関数の説明）
    # でも「calc」だけでは何も分からない！
    
    # 悪い点:
    # - 何を計算するか不明
    # - 動詞がない
    # - ピリオドがない
    
    return x + y
    # return = 関数の結果を返す命令
    # x + y = xとyを足し算した結果を返す


# ----- カイゼン後（良い例）-----

def good_pep257(x, y):
    # 同じ機能の関数だけど、説明が良くなっています
    
    """2つの数を足し算する。"""
    # ↑改善されたdocstring
    # 何をするか一目でわかります
    
    # 改善点:
    # ✓ 何をするか明確
    # ✓ 動詞で始まる（「足し算する」）
    # ✓ ピリオドで終わる（。）
    
    return x + y
    # 処理は同じだけど、説明がわかりやすくなりました


# ====================================
# 記法2: Google
# ====================================
# Googleが開発した書き方
# 世界中で最もよく使われています

print("\n" + "="*60)
# \n = 改行（1行空ける）
# "="*60 = また区切り線

print("【記法2】Google - チーム開発標準")
print("="*60)

"""
特徴:
- 読みやすい
- 書きやすい
- Args/Returns形式
- 業界標準
"""
# Args = Arguments（引数）の略
# Returns = 戻り値のこと

# ----- カイゼン前（悪い例）-----

def bad_google(x, y, z=10):
    # z=10 は「デフォルト値」
    # zを指定しなかったら自動で10になります
    
    """
    計算する
    
    Args:
        x: 数
        y: 数
        z: 数
    """
    # ↑説明が雑すぎる！
    # 「数」だけでは何の数か分からない
    
    # 悪い点:
    # - 型情報がない（整数？小数？）
    # - 説明が不十分
    # - Returns がない（何が返ってくるの？）
    # - デフォルト値の説明なし
    
    return x / y + z
    # x割るy、その結果にzを足す


# ----- カイゼン後（良い例）-----

def good_google(x, y, z=10):
    # 同じ関数だけど説明が超詳しい！
    
    """
    (x / y) + z を計算する。
    
    Args:
        x (float): 割られる数
        y (float): 割る数
        z (float, optional): 加算する数。デフォルトは10
    
    Returns:
        float: 計算結果
    
    Raises:
        ValueError: yが0の場合
    """
    # Args: 引数の説明
    #   - (float) = 型情報（小数）
    #   - optional = 省略可能という意味
    # Returns: 何が返ってくるか
    # Raises: どんなエラーが起きるか
    
    # 改善点:
    # ✓ 型情報がある（float = 小数）
    # ✓ 説明が具体的
    # ✓ Returns がある
    # ✓ optional を明記
    # ✓ Raises がある（エラー情報）
    
    if y == 0:
        # if = もし〜なら
        # y == 0 = yが0と等しいなら
        
        raise ValueError("yは0以外")
        # raise = エラーを発生させる
        # ValueError = 値が不正というエラー
        # 0で割るとエラーになるので防いでいます
        
    return x / y + z
    # yが0じゃなければ、ちゃんと計算します


# ====================================
# 記法3: NumPy
# ====================================
# NumPy = 数値計算ライブラリ
# データ分析でよく使われる書き方

print("\n" + "="*60)
print("【記法3】NumPy - データ分析向け")
print("="*60)

"""
特徴:
- 表形式
- 詳細に書ける
- ハイフン使用
- 科学計算向け
"""

# ----- カイゼン前（悪い例）-----

def bad_numpy(data):
    # data = リストを受け取る
    
    """
    統計計算
    
    Parameters
    ---
    data: リスト
    
    Returns
    --
    結果
    """
    # Parameters = 引数（Argsと同じ意味）
    # --- = ハイフンが3個（少なすぎ！）
    # 正しくは8個以上必要
    
    # 悪い点:
    # - ハイフンが少ない（3個）
    # - 型がない
    # - 説明が不十分
    # - インデントがない
    
    return sum(data) / len(data)
    # sum(data) = dataの合計
    # len(data) = dataの個数
    # 合計÷個数 = 平均値


# ----- カイゼン後（良い例）-----

def good_numpy(data):
    """
    リストの平均値を計算する。
    
    Parameters
    ----------
    data : list of float
        数値のリスト
    
    Returns
    -------
    float
        平均値
    
    Examples
    --------
    >>> good_numpy([10, 20, 30])
    20.0
    """
    # ---------- = ハイフン10個（正しい！）
    # data : list of float = 型の書き方
    #   コロン（:）の後に型を書く
    # 説明が4スペース字下げされている
    # Examples = 使用例を示している
    # >>> = Pythonの対話モードの記号
    
    # 改善点:
    # ✓ ハイフン8個以上
    # ✓ 型がある（: 形式）
    # ✓ 説明がインデント
    # ✓ Examples がある
    
    return sum(data) / len(data)
    # 処理は同じ


# ====================================
# 記法4: reST (Sphinx)
# ====================================
# reST = reStructuredText（文書の書き方の一つ）
# Sphinx = ドキュメント生成ツール
# 公式ドキュメントを作るときに使います

print("\n" + "="*60)
print("【記法4】reST - 公式ドキュメント向け")
print("="*60)

"""
特徴:
- Sphinx用
- :記法
- 各引数2行
- 公式向け
"""
# :記法 = コロンで始まる特別な書き方

# ----- カイゼン前（悪い例）-----

def bad_rest(name, age):
    """
    ユーザー情報
    
    :param name: 名前
    :param age: 年齢
    :return: 文字列
    """
    # :param = parameter（引数）の略
    # :return = 戻り値
    # でも型情報がない！
    
    # 悪い点:
    # - :type がない
    # - 説明が不十分
    # - :rtype がない
    
    return f"{name}さん（{age}歳）"
    # f"{name}さん" = f-string（文字列の埋め込み）
    # {name}の部分に変数nameの値が入ります
    # 例: name="太郎" なら "太郎さん"


# ----- カイゼン後（良い例）-----

def good_rest(name, age):
    """
    ユーザー情報を整形する。
    
    :param name: ユーザーの名前
    :type name: str
    :param age: ユーザーの年齢
    :type age: int
    :return: 整形された文字列
    :rtype: str
    
    .. note::
       ageは0以上の整数を想定
    """
    # :param name: 引数nameの説明
    # :type name: str = nameの型はstr（文字列）
    # :param age: 引数ageの説明
    # :type age: int = ageの型はint（整数）
    # :return: 戻り値の説明
    # :rtype: str = 戻り値の型はstr
    # .. note:: = 注意書き
    
    # 改善点:
    # ✓ :type がある
    # ✓ 説明が具体的
    # ✓ :rtype がある
    # ✓ .. note:: がある
    
    return f"{name}さん（{age}歳）"
    # 処理は同じ


# ====================================
# 記法5: Epytext
# ====================================
# Epytext = 古いドキュメント記法
# 今は使わないけど、古いコードで見かけることがあります

print("\n" + "="*60)
print("【記法5】Epytext - レガシー（非推奨）")
print("="*60)

"""
特徴:
- @記法
- 古い
- 新規では使わない
- レガシー保守のみ
"""
# レガシー = 古い、時代遅れ
# 保守 = すでにあるコードを直すこと

# ----- カイゼン前（悪い例）-----

def bad_epytext(price, tax):
    """
    計算
    
    @param price: 価格
    @return: 結果
    """
    # @param = 引数（:paramと同じ意味）
    # @を使うのが古いスタイル
    
    # 悪い点:
    # - @type がない
    # - 説明不足
    # - @rtype がない
    # - そもそも使うべきでない
    
    return price * (1 + tax)
    # price * (1 + tax) = 税込み価格の計算
    # 例: 1000円、税率10%(0.1)なら
    #     1000 * (1 + 0.1) = 1000 * 1.1 = 1100円


# ----- カイゼン後（良い例）-----

def good_epytext(price, tax):
    """
    税込み価格を計算する。
    
    @param price: 税抜き価格
    @type price: int
    @param tax: 税率
    @type tax: float
    @return: 税込み価格
    @rtype: int
    
    @deprecated: 新規プロジェクトではGoogleスタイルを使用してください
    """
    # @type price: int = priceの型は整数
    # @type tax: float = taxの型は小数
    # @rtype: int = 戻り値の型は整数
    # @deprecated = 非推奨（使わないで！）という意味
    
    # 改善点:
    # ✓ @type がある
    # ✓ 説明が具体的
    # ✓ @rtype がある
    # ✓ @deprecated で非推奨を明記
    # ただし新規では使わない！
    
    return int(price * (1 + tax))
    # int() = 小数を整数に変換
    # 1100.0 → 1100


# ====================================
# 比較表
# ====================================

print("\n" + "="*60)
print("【比較表】5大記法の使い分け")
print("="*60)
print("""
┌──────────┬──────────┬──────────┬──────────┐
│ 記法     │ 特徴     │ 使う場面 │ 推奨度   │
├──────────┼──────────┼──────────┼──────────┤
│ PEP 257  │ 最小限   │ 個人開発 │ ★★★☆☆ │
│ Google   │ 読みやすい│ チーム開発│ ★★★★★ │
│ NumPy    │ 詳細     │ データ分析│ ★★★★☆ │
│ reST     │ 公式向け │ OSS開発  │ ★★★☆☆ │
│ Epytext  │ レガシー │ 保守のみ │ ★☆☆☆☆ │
└──────────┴──────────┴──────────┴──────────┘

迷ったら → Googleスタイル！
""")
# この表は文字で描いた表（罫線素）
# ★の数で推奨度を表しています
# Googleスタイルが最も推奨（★5つ）


# ====================================
# チェックリスト
# ====================================

print("\n" + "="*60)
print("【チェックリスト】良いdocstringの条件")
print("="*60)
print("""
□ 三重引用符で囲んでいる
□ 概要が1行目にある
□ 動詞で始まる（〜する）
□ ピリオドで終わる
□ 全引数を説明している
□ 型情報がある
□ 戻り値を説明している
□ 例外を説明している（ある場合）
□ デフォルト値を明記（ある場合）
□ 使用例がある（複雑な場合）
""")
# □ = チェックボックス
# これらを満たせば良いdocstring！


# ====================================
# よくある間違い
# ====================================

print("\n" + "="*60)
print("【よくある間違い】")
print("="*60)

# 間違い1: 引用符の数
def wrong1():
    "これは間違い"  # NG: " が1個だけ
    """これは正しい"""  # OK: """ が3個
    pass  # pass = 何もしない（空の関数）

# 間違い2: 位置
"""これは間違い"""  # NG: 関数の外に書いてる
def wrong2():
    """これは正しい"""  # OK: defの直後
    pass

# 間違い3: 型の書き方（Google）
def wrong3(x):
    """
    Args:
        x int: 説明  # NG: カッコがない
        x (int): 説明  # OK: (int)とカッコで囲む
    """
    pass

# 間違い4: ハイフンの数（NumPy）
def wrong4(x):
    """
    Parameters
    ---  # NG: ハイフン3個（少ない）
    ----------  # OK: ハイフン8個以上
    """
    pass


# ====================================
# 実行テスト
# ====================================

print("\n" + "="*60)
print("【実行テスト】カイゼン前後の比較")
print("="*60)

# PEP 257
print("\n[PEP 257]")
print("カイゼン前:", bad_pep257(10, 5))
# bad_pep257(10, 5) を実行
# 10 + 5 = 15

print("カイゼン後:", good_pep257(10, 5))
# good_pep257(10, 5) を実行
# 10 + 5 = 15（結果は同じ、説明が良くなった）

# Google
print("\n[Google]")
print("カイゼン前:", bad_google(20, 4, 10))
# 20 / 4 + 10 = 5 + 10 = 15

print("カイゼン後:", good_google(20, 4, 10))
# 同じ計算、同じ結果

# NumPy
print("\n[NumPy]")
print("カイゼン前:", bad_numpy([10, 20, 30]))
# [10, 20, 30]の平均 = (10+20+30)/3 = 20.0

print("カイゼン後:", good_numpy([10, 20, 30]))
# 同じ計算、同じ結果

# reST
print("\n[reST]")
print("カイゼン前:", bad_rest("太郎", 25))
# "太郎さん（25歳）"と表示

print("カイゼン後:", good_rest("太郎", 25))
# 同じ結果

# Epytext
print("\n[Epytext]")
print("カイゼン前:", bad_epytext(1000, 0.1))
# 1000 * (1 + 0.1) = 1000 * 1.1 = 1100.0

print("カイゼン後:", good_epytext(1000, 0.1))
# int(1100.0) = 1100（整数化）


# ====================================
# まとめ
# ====================================

print("\n" + "="*60)
print("【まとめ】")
print("="*60)
print("""
【カイゼンのポイント】

1. 型情報を必ず書く
   NG: x: 数
   OK: x (int): 整数

2. 説明は具体的に
   NG: データ
   OK: ユーザーIDのリスト

3. 戻り値を書く
   NG: （なし）
   OK: Returns: int: 合計値

4. 例外を書く
   NG: （なし）
   OK: Raises: ValueError: xが負の場合

5. デフォルト値を明記
   NG: z: 数
   OK: z (int, optional): デフォルトは10

【新人エンジニアへ】
- まずはGoogleスタイルから
- help()で確認する習慣を
- 既存コードのスタイルに合わせる
- 完璧を求めすぎない
- 継続が大切

頑張ってください！
""")
# 最後に重要ポイントをまとめています


🎓 超重要ポイント

"""（三重引用符） = docstringの目印

def の直後 に書く = 関数の説明

Googleスタイル から始めよう = 世界標準

型を書く = (int), (str), (float)など

help(関数名) で確認できる！

試しに help(good_google) って打ってみると、書いたdocstringが表示されますよ！
