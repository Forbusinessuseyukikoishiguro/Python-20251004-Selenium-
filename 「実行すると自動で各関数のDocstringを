了解です！🐰
では、新人向けに **「実行すると自動で各関数のDocstringを確認できる対話型チートシート」** を作ります。
これを使えば、**計算結果とDocstringが同時に見れて、`help()` や `.__doc__` の練習にもなる**仕様です。

---

```python
# -*- coding: utf-8 -*-
"""
🐰 Python 消費税計算 × Docstring確認チートシート（対話型）
-------------------------------------------------------------------------------
- 各Docstringスタイルの関数を定義
- 実行すると自動でDocstringと計算結果を表示
- 新人エンジニア向けの学習・確認用
"""

from typing import List, Dict

# -----------------------------
# 5大Docstringスタイル関数
# -----------------------------
def calc_tax_pep257(price: float, tax_rate: float = 0.10) -> float:
    """価格から消費税を計算して合計金額を返す."""
    return price * (1 + tax_rate)

def calc_tax_google(price: float, tax_rate: float = 0.10) -> float:
    """
    価格から消費税を計算して合計金額を返す

    Args:
        price (float): 商品の価格
        tax_rate (float, optional): 消費税率（デフォルト10%）

    Returns:
        float: 消費税込みの合計金額
    """
    return price * (1 + tax_rate)

def calc_tax_numpy(price: float, tax_rate: float = 0.10) -> float:
    """
    価格から消費税を計算して合計金額を返す

    Parameters
    ----------
    price : float
        商品の価格
    tax_rate : float, optional
        消費税率（デフォルト0.10）

    Returns
    -------
    float
        消費税込みの合計金額
    """
    return price * (1 + tax_rate)

def calc_tax_rest(price: float, tax_rate: float = 0.10) -> float:
    """
    価格から消費税を計算して合計金額を返す

    :param price: 商品の価格
    :type price: float
    :param tax_rate: 消費税率（デフォルト0.10）
    :type tax_rate: float
    :return: 消費税込みの合計金額
    :rtype: float
    """
    return price * (1 + tax_rate)

def calc_tax_epytext(price: float, tax_rate: float = 0.10) -> float:
    """
    @param price: 商品の価格
    @type price: float
    @param tax_rate: 消費税率
    @type tax_rate: float
    @return: 消費税込みの合計金額
    @rtype: float
    """
    return price * (1 + tax_rate)

# -----------------------------
# 型ヒント応用例
# -----------------------------
def calc_prices(prices: List[float]) -> Dict[str, float]:
    """
    複数商品の合計と税込合計を計算する

    Parameters
    ----------
    prices : List[float]
        商品価格のリスト

    Returns
    -------
    Dict[str, float]
        合計と税込合計の辞書
    """
    total = sum(prices)
    return {"total": total, "with_tax": total * 1.1}

# -----------------------------
# Docstring自動確認関数
# -----------------------------
def display_doc_and_result(func, *args):
    print(f"=== {func.__name__} ===")
    print("Docstring:")
    print(func.__doc__)
    result = func(*args)
    print("計算結果:", result)
    print("-" * 40)

# -----------------------------
# 実行
# -----------------------------
if __name__ == "__main__":
    print("🐰 Python Docstring & 消費税計算 対話型チートシート\n")

    price = 1000
    tax = 0.10
    prices_list = [100, 200, 300]

    # 型ヒント説明
    print("=== 型ヒント説明 ===")
    print("price: float           -> 引数 price は float 型")
    print("tax_rate: float = 0.10 -> 引数 tax_rate は float 型、デフォルト値 0.10")
    print("-> float               -> 関数の戻り値は float 型")
    print("-" * 40)

    # 各Docstringスタイルを自動表示
    funcs = [
        calc_tax_pep257,
        calc_tax_google,
        calc_tax_numpy,
        calc_tax_rest,
        calc_tax_epytext,
        calc_prices
    ]

    for f in funcs:
        if f == calc_prices:
            display_doc_and_result(f, prices_list)
        else:
            display_doc_and_result(f, price, tax)

    print("🐰 以上で、各関数のDocstringと計算結果を自動表示しました！")
    print("help() や __doc__ でも同じ内容を確認できます。")
```

---

### ✅ このチートシートの特徴

1. 実行すると **各関数のDocstringと計算結果を自動表示**
2. 新人向けに **型ヒントの説明** も同時に表示
3. `help(func)` や `.__doc__` の確認方法も理解できる
4. List / Dict を使った応用例も含まれている

---

🐰 このファイルをそのまま `python filename.py` で実行すると、
**新人でもすぐにDocstringの意味と計算結果を同時に確認できる対話型チートシート** として使えます。

---

💡 もし希望なら、このチートシートに **「ユーザー入力で価格・税率を変えて実行できる対話型版」** に拡張することもできます。

作りますか？
